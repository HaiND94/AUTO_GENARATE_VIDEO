# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Server(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period_download': 'float',
        'period_upload': 'float',
        'period_reset': 'float',
        'app_state': 'str',
        'main_server': 'str',
        'main_server_address': 'str',
        'server_name': 'str',
        'server_ip': 'str',
        'max_account': 'float',
        'id': 'float',
        'manager_id': 'float',
        'user_use_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'period_download': 'periodDownload',
        'period_upload': 'periodUpload',
        'period_reset': 'periodReset',
        'app_state': 'appState',
        'main_server': 'mainServer',
        'main_server_address': 'mainServerAddress',
        'server_name': 'serverName',
        'server_ip': 'serverIp',
        'max_account': 'maxAccount',
        'id': 'id',
        'manager_id': 'managerId',
        'user_use_id': 'userUseId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, period_download=None, period_upload=None, period_reset=None, app_state=None, main_server=None, main_server_address=None, server_name=None, server_ip=None, max_account=None, id=None, manager_id=None, user_use_id=None, created_at=None, updated_at=None):
        """
        Server - a model defined in Swagger
        """

        self._period_download = None
        self._period_upload = None
        self._period_reset = None
        self._app_state = None
        self._main_server = None
        self._main_server_address = None
        self._server_name = None
        self._server_ip = None
        self._max_account = None
        self._id = None
        self._manager_id = None
        self._user_use_id = None
        self._created_at = None
        self._updated_at = None

        if period_download is not None:
          self.period_download = period_download
        if period_upload is not None:
          self.period_upload = period_upload
        if period_reset is not None:
          self.period_reset = period_reset
        if app_state is not None:
          self.app_state = app_state
        if main_server is not None:
          self.main_server = main_server
        if main_server_address is not None:
          self.main_server_address = main_server_address
        if server_name is not None:
          self.server_name = server_name
        if server_ip is not None:
          self.server_ip = server_ip
        if max_account is not None:
          self.max_account = max_account
        if id is not None:
          self.id = id
        if manager_id is not None:
          self.manager_id = manager_id
        if user_use_id is not None:
          self.user_use_id = user_use_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def period_download(self):
        """
        Gets the period_download of this Server.

        :return: The period_download of this Server.
        :rtype: float
        """
        return self._period_download

    @period_download.setter
    def period_download(self, period_download):
        """
        Sets the period_download of this Server.

        :param period_download: The period_download of this Server.
        :type: float
        """

        self._period_download = period_download

    @property
    def period_upload(self):
        """
        Gets the period_upload of this Server.

        :return: The period_upload of this Server.
        :rtype: float
        """
        return self._period_upload

    @period_upload.setter
    def period_upload(self, period_upload):
        """
        Sets the period_upload of this Server.

        :param period_upload: The period_upload of this Server.
        :type: float
        """

        self._period_upload = period_upload

    @property
    def period_reset(self):
        """
        Gets the period_reset of this Server.

        :return: The period_reset of this Server.
        :rtype: float
        """
        return self._period_reset

    @period_reset.setter
    def period_reset(self, period_reset):
        """
        Sets the period_reset of this Server.

        :param period_reset: The period_reset of this Server.
        :type: float
        """

        self._period_reset = period_reset

    @property
    def app_state(self):
        """
        Gets the app_state of this Server.

        :return: The app_state of this Server.
        :rtype: str
        """
        return self._app_state

    @app_state.setter
    def app_state(self, app_state):
        """
        Sets the app_state of this Server.

        :param app_state: The app_state of this Server.
        :type: str
        """

        self._app_state = app_state

    @property
    def main_server(self):
        """
        Gets the main_server of this Server.

        :return: The main_server of this Server.
        :rtype: str
        """
        return self._main_server

    @main_server.setter
    def main_server(self, main_server):
        """
        Sets the main_server of this Server.

        :param main_server: The main_server of this Server.
        :type: str
        """

        self._main_server = main_server

    @property
    def main_server_address(self):
        """
        Gets the main_server_address of this Server.

        :return: The main_server_address of this Server.
        :rtype: str
        """
        return self._main_server_address

    @main_server_address.setter
    def main_server_address(self, main_server_address):
        """
        Sets the main_server_address of this Server.

        :param main_server_address: The main_server_address of this Server.
        :type: str
        """

        self._main_server_address = main_server_address

    @property
    def server_name(self):
        """
        Gets the server_name of this Server.

        :return: The server_name of this Server.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """
        Sets the server_name of this Server.

        :param server_name: The server_name of this Server.
        :type: str
        """

        self._server_name = server_name

    @property
    def server_ip(self):
        """
        Gets the server_ip of this Server.

        :return: The server_ip of this Server.
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """
        Sets the server_ip of this Server.

        :param server_ip: The server_ip of this Server.
        :type: str
        """

        self._server_ip = server_ip

    @property
    def max_account(self):
        """
        Gets the max_account of this Server.

        :return: The max_account of this Server.
        :rtype: float
        """
        return self._max_account

    @max_account.setter
    def max_account(self, max_account):
        """
        Sets the max_account of this Server.

        :param max_account: The max_account of this Server.
        :type: float
        """

        self._max_account = max_account

    @property
    def id(self):
        """
        Gets the id of this Server.

        :return: The id of this Server.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Server.

        :param id: The id of this Server.
        :type: float
        """

        self._id = id

    @property
    def manager_id(self):
        """
        Gets the manager_id of this Server.

        :return: The manager_id of this Server.
        :rtype: float
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """
        Sets the manager_id of this Server.

        :param manager_id: The manager_id of this Server.
        :type: float
        """

        self._manager_id = manager_id

    @property
    def user_use_id(self):
        """
        Gets the user_use_id of this Server.

        :return: The user_use_id of this Server.
        :rtype: float
        """
        return self._user_use_id

    @user_use_id.setter
    def user_use_id(self, user_use_id):
        """
        Sets the user_use_id of this Server.

        :param user_use_id: The user_use_id of this Server.
        :type: float
        """

        self._user_use_id = user_use_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Server.

        :return: The created_at of this Server.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Server.

        :param created_at: The created_at of this Server.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Server.

        :return: The updated_at of this Server.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Server.

        :param updated_at: The updated_at of this Server.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Server):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
