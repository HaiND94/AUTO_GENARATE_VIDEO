# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Singer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'name_translate': 'str',
        'id_spotify': 'str',
        'description': 'str',
        'rank': 'float',
        'followers': 'float',
        'number_of_views_per_month': 'float',
        'id_youtube_chart': 'str',
        'channel_id': 'str',
        'kugou_id': 'str',
        'analytic_views': 'list[object]',
        'active': 'bool',
        'auto_get_data': 'bool',
        'id': 'float',
        'account_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'category_id': 'float',
        'country_id': 'float'
    }

    attribute_map = {
        'name': 'name',
        'name_translate': 'nameTranslate',
        'id_spotify': 'idSpotify',
        'description': 'description',
        'rank': 'rank',
        'followers': 'followers',
        'number_of_views_per_month': 'numberOfViewsPerMonth',
        'id_youtube_chart': 'idYoutubeChart',
        'channel_id': 'channelId',
        'kugou_id': 'kugouId',
        'analytic_views': 'analyticViews',
        'active': 'active',
        'auto_get_data': 'autoGetData',
        'id': 'id',
        'account_id': 'accountId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'category_id': 'categoryId',
        'country_id': 'countryId'
    }

    def __init__(self, name=None, name_translate=None, id_spotify=None, description=None, rank=None, followers=None, number_of_views_per_month=None, id_youtube_chart=None, channel_id=None, kugou_id=None, analytic_views=None, active=True, auto_get_data=True, id=None, account_id=None, created_at=None, updated_at=None, category_id=None, country_id=None):
        """
        Singer - a model defined in Swagger
        """

        self._name = None
        self._name_translate = None
        self._id_spotify = None
        self._description = None
        self._rank = None
        self._followers = None
        self._number_of_views_per_month = None
        self._id_youtube_chart = None
        self._channel_id = None
        self._kugou_id = None
        self._analytic_views = None
        self._active = None
        self._auto_get_data = None
        self._id = None
        self._account_id = None
        self._created_at = None
        self._updated_at = None
        self._category_id = None
        self._country_id = None

        if name is not None:
          self.name = name
        if name_translate is not None:
          self.name_translate = name_translate
        if id_spotify is not None:
          self.id_spotify = id_spotify
        if description is not None:
          self.description = description
        if rank is not None:
          self.rank = rank
        if followers is not None:
          self.followers = followers
        if number_of_views_per_month is not None:
          self.number_of_views_per_month = number_of_views_per_month
        if id_youtube_chart is not None:
          self.id_youtube_chart = id_youtube_chart
        if channel_id is not None:
          self.channel_id = channel_id
        if kugou_id is not None:
          self.kugou_id = kugou_id
        if analytic_views is not None:
          self.analytic_views = analytic_views
        if active is not None:
          self.active = active
        if auto_get_data is not None:
          self.auto_get_data = auto_get_data
        if id is not None:
          self.id = id
        if account_id is not None:
          self.account_id = account_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if category_id is not None:
          self.category_id = category_id
        if country_id is not None:
          self.country_id = country_id

    @property
    def name(self):
        """
        Gets the name of this Singer.

        :return: The name of this Singer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Singer.

        :param name: The name of this Singer.
        :type: str
        """

        self._name = name

    @property
    def name_translate(self):
        """
        Gets the name_translate of this Singer.

        :return: The name_translate of this Singer.
        :rtype: str
        """
        return self._name_translate

    @name_translate.setter
    def name_translate(self, name_translate):
        """
        Sets the name_translate of this Singer.

        :param name_translate: The name_translate of this Singer.
        :type: str
        """

        self._name_translate = name_translate

    @property
    def id_spotify(self):
        """
        Gets the id_spotify of this Singer.

        :return: The id_spotify of this Singer.
        :rtype: str
        """
        return self._id_spotify

    @id_spotify.setter
    def id_spotify(self, id_spotify):
        """
        Sets the id_spotify of this Singer.

        :param id_spotify: The id_spotify of this Singer.
        :type: str
        """

        self._id_spotify = id_spotify

    @property
    def description(self):
        """
        Gets the description of this Singer.

        :return: The description of this Singer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Singer.

        :param description: The description of this Singer.
        :type: str
        """

        self._description = description

    @property
    def rank(self):
        """
        Gets the rank of this Singer.

        :return: The rank of this Singer.
        :rtype: float
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """
        Sets the rank of this Singer.

        :param rank: The rank of this Singer.
        :type: float
        """

        self._rank = rank

    @property
    def followers(self):
        """
        Gets the followers of this Singer.

        :return: The followers of this Singer.
        :rtype: float
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """
        Sets the followers of this Singer.

        :param followers: The followers of this Singer.
        :type: float
        """

        self._followers = followers

    @property
    def number_of_views_per_month(self):
        """
        Gets the number_of_views_per_month of this Singer.

        :return: The number_of_views_per_month of this Singer.
        :rtype: float
        """
        return self._number_of_views_per_month

    @number_of_views_per_month.setter
    def number_of_views_per_month(self, number_of_views_per_month):
        """
        Sets the number_of_views_per_month of this Singer.

        :param number_of_views_per_month: The number_of_views_per_month of this Singer.
        :type: float
        """

        self._number_of_views_per_month = number_of_views_per_month

    @property
    def id_youtube_chart(self):
        """
        Gets the id_youtube_chart of this Singer.

        :return: The id_youtube_chart of this Singer.
        :rtype: str
        """
        return self._id_youtube_chart

    @id_youtube_chart.setter
    def id_youtube_chart(self, id_youtube_chart):
        """
        Sets the id_youtube_chart of this Singer.

        :param id_youtube_chart: The id_youtube_chart of this Singer.
        :type: str
        """

        self._id_youtube_chart = id_youtube_chart

    @property
    def channel_id(self):
        """
        Gets the channel_id of this Singer.

        :return: The channel_id of this Singer.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this Singer.

        :param channel_id: The channel_id of this Singer.
        :type: str
        """

        self._channel_id = channel_id

    @property
    def kugou_id(self):
        """
        Gets the kugou_id of this Singer.

        :return: The kugou_id of this Singer.
        :rtype: str
        """
        return self._kugou_id

    @kugou_id.setter
    def kugou_id(self, kugou_id):
        """
        Sets the kugou_id of this Singer.

        :param kugou_id: The kugou_id of this Singer.
        :type: str
        """

        self._kugou_id = kugou_id

    @property
    def analytic_views(self):
        """
        Gets the analytic_views of this Singer.

        :return: The analytic_views of this Singer.
        :rtype: list[object]
        """
        return self._analytic_views

    @analytic_views.setter
    def analytic_views(self, analytic_views):
        """
        Sets the analytic_views of this Singer.

        :param analytic_views: The analytic_views of this Singer.
        :type: list[object]
        """

        self._analytic_views = analytic_views

    @property
    def active(self):
        """
        Gets the active of this Singer.

        :return: The active of this Singer.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Singer.

        :param active: The active of this Singer.
        :type: bool
        """

        self._active = active

    @property
    def auto_get_data(self):
        """
        Gets the auto_get_data of this Singer.

        :return: The auto_get_data of this Singer.
        :rtype: bool
        """
        return self._auto_get_data

    @auto_get_data.setter
    def auto_get_data(self, auto_get_data):
        """
        Sets the auto_get_data of this Singer.

        :param auto_get_data: The auto_get_data of this Singer.
        :type: bool
        """

        self._auto_get_data = auto_get_data

    @property
    def id(self):
        """
        Gets the id of this Singer.

        :return: The id of this Singer.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Singer.

        :param id: The id of this Singer.
        :type: float
        """

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this Singer.

        :return: The account_id of this Singer.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Singer.

        :param account_id: The account_id of this Singer.
        :type: float
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Singer.

        :return: The created_at of this Singer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Singer.

        :param created_at: The created_at of this Singer.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Singer.

        :return: The updated_at of this Singer.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Singer.

        :param updated_at: The updated_at of this Singer.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def category_id(self):
        """
        Gets the category_id of this Singer.

        :return: The category_id of this Singer.
        :rtype: float
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this Singer.

        :param category_id: The category_id of this Singer.
        :type: float
        """

        self._category_id = category_id

    @property
    def country_id(self):
        """
        Gets the country_id of this Singer.

        :return: The country_id of this Singer.
        :rtype: float
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this Singer.

        :param country_id: The country_id of this Singer.
        :type: float
        """

        self._country_id = country_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Singer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
