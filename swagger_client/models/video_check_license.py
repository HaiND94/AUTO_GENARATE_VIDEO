# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VideoCheckLicense(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video_id': 'str',
        'audio_id': 'float',
        'channel_check_license_id': 'str',
        'time_check': 'str',
        'time_start_audio': 'list[object]',
        'id': 'float'
    }

    attribute_map = {
        'video_id': 'videoId',
        'audio_id': 'audioId',
        'channel_check_license_id': 'channelCheckLicenseId',
        'time_check': 'timeCheck',
        'time_start_audio': 'timeStartAudio',
        'id': 'id'
    }

    def __init__(self, video_id=None, audio_id=None, channel_check_license_id=None, time_check=None, time_start_audio=None, id=None):
        """
        VideoCheckLicense - a model defined in Swagger
        """

        self._video_id = None
        self._audio_id = None
        self._channel_check_license_id = None
        self._time_check = None
        self._time_start_audio = None
        self._id = None

        if video_id is not None:
          self.video_id = video_id
        if audio_id is not None:
          self.audio_id = audio_id
        if channel_check_license_id is not None:
          self.channel_check_license_id = channel_check_license_id
        if time_check is not None:
          self.time_check = time_check
        if time_start_audio is not None:
          self.time_start_audio = time_start_audio
        if id is not None:
          self.id = id

    @property
    def video_id(self):
        """
        Gets the video_id of this VideoCheckLicense.

        :return: The video_id of this VideoCheckLicense.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """
        Sets the video_id of this VideoCheckLicense.

        :param video_id: The video_id of this VideoCheckLicense.
        :type: str
        """

        self._video_id = video_id

    @property
    def audio_id(self):
        """
        Gets the audio_id of this VideoCheckLicense.

        :return: The audio_id of this VideoCheckLicense.
        :rtype: float
        """
        return self._audio_id

    @audio_id.setter
    def audio_id(self, audio_id):
        """
        Sets the audio_id of this VideoCheckLicense.

        :param audio_id: The audio_id of this VideoCheckLicense.
        :type: float
        """

        self._audio_id = audio_id

    @property
    def channel_check_license_id(self):
        """
        Gets the channel_check_license_id of this VideoCheckLicense.

        :return: The channel_check_license_id of this VideoCheckLicense.
        :rtype: str
        """
        return self._channel_check_license_id

    @channel_check_license_id.setter
    def channel_check_license_id(self, channel_check_license_id):
        """
        Sets the channel_check_license_id of this VideoCheckLicense.

        :param channel_check_license_id: The channel_check_license_id of this VideoCheckLicense.
        :type: str
        """

        self._channel_check_license_id = channel_check_license_id

    @property
    def time_check(self):
        """
        Gets the time_check of this VideoCheckLicense.

        :return: The time_check of this VideoCheckLicense.
        :rtype: str
        """
        return self._time_check

    @time_check.setter
    def time_check(self, time_check):
        """
        Sets the time_check of this VideoCheckLicense.

        :param time_check: The time_check of this VideoCheckLicense.
        :type: str
        """

        self._time_check = time_check

    @property
    def time_start_audio(self):
        """
        Gets the time_start_audio of this VideoCheckLicense.

        :return: The time_start_audio of this VideoCheckLicense.
        :rtype: list[object]
        """
        return self._time_start_audio

    @time_start_audio.setter
    def time_start_audio(self, time_start_audio):
        """
        Sets the time_start_audio of this VideoCheckLicense.

        :param time_start_audio: The time_start_audio of this VideoCheckLicense.
        :type: list[object]
        """

        self._time_start_audio = time_start_audio

    @property
    def id(self):
        """
        Gets the id of this VideoCheckLicense.

        :return: The id of this VideoCheckLicense.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VideoCheckLicense.

        :param id: The id of this VideoCheckLicense.
        :type: float
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VideoCheckLicense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
