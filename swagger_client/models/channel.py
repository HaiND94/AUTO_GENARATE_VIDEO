# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Channel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'password': 'str',
        'channel_id': 'str',
        'name_of_channel': 'str',
        'cookie': 'str',
        'meta_data': 'str',
        'max_video_publish_perday': 'float',
        'schedule_start': 'str',
        'schedule_end': 'str',
        'publish': 'str',
        'day_public': 'float',
        'current_num_video_uploaded': 'float',
        'last_upload_time': 'datetime',
        'total_video': 'float',
        'total_video_upload': 'float',
        'total_video_error': 'float',
        'status': 'str',
        'run': 'str',
        'cookie_state': 'str',
        'period_upload': 'float',
        'period_publish': 'float',
        'is_publish_manual': 'bool',
        'upload_time_at': 'datetime',
        'channel_view': 'float',
        'kids_content': 'bool',
        'copy_right_content': 'bool',
        'banner_image': 'str',
        'avatar_image': 'str',
        'water_mark_image': 'str',
        'banner_image_status': 'bool',
        'avatar_image_status': 'bool',
        'water_mark_image_status': 'bool',
        'channel_detail': 'str',
        'email_contact': 'str',
        'link_social': 'list[str]',
        'keywords': 'list[str]',
        'channel_content': 'str',
        'description': 'str',
        'desc_status': 'bool',
        'last_seo': 'datetime',
        'seo_state': 'str',
        'current_state': 'str',
        'img_types': 'list[str]',
        'active': 'bool',
        'template_used': 'str',
        'singer_img_used': 'str',
        'data_decor_layout': 'list[object]',
        'status_decor_layout': 'bool',
        'status_update_branding': 'str',
        'private_data': 'str',
        'channel_type': 'str',
        'id': 'float',
        'account_id': 'float',
        'topic_id': 'float',
        'country_id': 'float',
        'language_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'server_id': 'float',
        'music_genre_id': 'float'
    }

    attribute_map = {
        'email': 'email',
        'password': 'password',
        'channel_id': 'channelId',
        'name_of_channel': 'nameOfChannel',
        'cookie': 'cookie',
        'meta_data': 'metaData',
        'max_video_publish_perday': 'maxVideoPublishPerday',
        'schedule_start': 'scheduleStart',
        'schedule_end': 'scheduleEnd',
        'publish': 'publish',
        'day_public': 'dayPublic',
        'current_num_video_uploaded': 'currentNumVideoUploaded',
        'last_upload_time': 'lastUploadTime',
        'total_video': 'totalVideo',
        'total_video_upload': 'totalVideoUpload',
        'total_video_error': 'totalVideoError',
        'status': 'status',
        'run': 'run',
        'cookie_state': 'cookieState',
        'period_upload': 'periodUpload',
        'period_publish': 'periodPublish',
        'is_publish_manual': 'isPublishManual',
        'upload_time_at': 'uploadTimeAt',
        'channel_view': 'channelView',
        'kids_content': 'kidsContent',
        'copy_right_content': 'copyRightContent',
        'banner_image': 'bannerImage',
        'avatar_image': 'avatarImage',
        'water_mark_image': 'waterMarkImage',
        'banner_image_status': 'bannerImageStatus',
        'avatar_image_status': 'avatarImageStatus',
        'water_mark_image_status': 'waterMarkImageStatus',
        'channel_detail': 'channelDetail',
        'email_contact': 'emailContact',
        'link_social': 'linkSocial',
        'keywords': 'keywords',
        'channel_content': 'channelContent',
        'description': 'description',
        'desc_status': 'descStatus',
        'last_seo': 'lastSeo',
        'seo_state': 'seoState',
        'current_state': 'currentState',
        'img_types': 'imgTypes',
        'active': 'active',
        'template_used': 'templateUsed',
        'singer_img_used': 'singerImgUsed',
        'data_decor_layout': 'dataDecorLayout',
        'status_decor_layout': 'statusDecorLayout',
        'status_update_branding': 'statusUpdateBranding',
        'private_data': 'privateData',
        'channel_type': 'channelType',
        'id': 'id',
        'account_id': 'accountId',
        'topic_id': 'topicId',
        'country_id': 'countryId',
        'language_id': 'languageId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'server_id': 'serverId',
        'music_genre_id': 'musicGenreId'
    }

    def __init__(self, email=None, password=None, channel_id=None, name_of_channel=None, cookie=None, meta_data=None, max_video_publish_perday=None, schedule_start=None, schedule_end=None, publish=None, day_public=None, current_num_video_uploaded=None, last_upload_time=None, total_video=None, total_video_upload=None, total_video_error=None, status=None, run='START', cookie_state=None, period_upload=None, period_publish=None, is_publish_manual=None, upload_time_at=None, channel_view=None, kids_content=None, copy_right_content=None, banner_image=None, avatar_image=None, water_mark_image=None, banner_image_status=None, avatar_image_status=None, water_mark_image_status=None, channel_detail=None, email_contact=None, link_social=None, keywords=None, channel_content=None, description=None, desc_status=None, last_seo=None, seo_state=None, current_state=None, img_types=None, active=True, template_used=None, singer_img_used=None, data_decor_layout=None, status_decor_layout=None, status_update_branding=None, private_data=None, channel_type='VIDEO', id=None, account_id=None, topic_id=None, country_id=None, language_id=None, created_at=None, updated_at=None, server_id=None, music_genre_id=None):
        """
        Channel - a model defined in Swagger
        """

        self._email = None
        self._password = None
        self._channel_id = None
        self._name_of_channel = None
        self._cookie = None
        self._meta_data = None
        self._max_video_publish_perday = None
        self._schedule_start = None
        self._schedule_end = None
        self._publish = None
        self._day_public = None
        self._current_num_video_uploaded = None
        self._last_upload_time = None
        self._total_video = None
        self._total_video_upload = None
        self._total_video_error = None
        self._status = None
        self._run = None
        self._cookie_state = None
        self._period_upload = None
        self._period_publish = None
        self._is_publish_manual = None
        self._upload_time_at = None
        self._channel_view = None
        self._kids_content = None
        self._copy_right_content = None
        self._banner_image = None
        self._avatar_image = None
        self._water_mark_image = None
        self._banner_image_status = None
        self._avatar_image_status = None
        self._water_mark_image_status = None
        self._channel_detail = None
        self._email_contact = None
        self._link_social = None
        self._keywords = None
        self._channel_content = None
        self._description = None
        self._desc_status = None
        self._last_seo = None
        self._seo_state = None
        self._current_state = None
        self._img_types = None
        self._active = None
        self._template_used = None
        self._singer_img_used = None
        self._data_decor_layout = None
        self._status_decor_layout = None
        self._status_update_branding = None
        self._private_data = None
        self._channel_type = None
        self._id = None
        self._account_id = None
        self._topic_id = None
        self._country_id = None
        self._language_id = None
        self._created_at = None
        self._updated_at = None
        self._server_id = None
        self._music_genre_id = None

        if email is not None:
          self.email = email
        if password is not None:
          self.password = password
        if channel_id is not None:
          self.channel_id = channel_id
        if name_of_channel is not None:
          self.name_of_channel = name_of_channel
        if cookie is not None:
          self.cookie = cookie
        if meta_data is not None:
          self.meta_data = meta_data
        if max_video_publish_perday is not None:
          self.max_video_publish_perday = max_video_publish_perday
        if schedule_start is not None:
          self.schedule_start = schedule_start
        if schedule_end is not None:
          self.schedule_end = schedule_end
        if publish is not None:
          self.publish = publish
        if day_public is not None:
          self.day_public = day_public
        if current_num_video_uploaded is not None:
          self.current_num_video_uploaded = current_num_video_uploaded
        if last_upload_time is not None:
          self.last_upload_time = last_upload_time
        if total_video is not None:
          self.total_video = total_video
        if total_video_upload is not None:
          self.total_video_upload = total_video_upload
        if total_video_error is not None:
          self.total_video_error = total_video_error
        if status is not None:
          self.status = status
        if run is not None:
          self.run = run
        if cookie_state is not None:
          self.cookie_state = cookie_state
        if period_upload is not None:
          self.period_upload = period_upload
        if period_publish is not None:
          self.period_publish = period_publish
        if is_publish_manual is not None:
          self.is_publish_manual = is_publish_manual
        if upload_time_at is not None:
          self.upload_time_at = upload_time_at
        if channel_view is not None:
          self.channel_view = channel_view
        if kids_content is not None:
          self.kids_content = kids_content
        if copy_right_content is not None:
          self.copy_right_content = copy_right_content
        if banner_image is not None:
          self.banner_image = banner_image
        if avatar_image is not None:
          self.avatar_image = avatar_image
        if water_mark_image is not None:
          self.water_mark_image = water_mark_image
        if banner_image_status is not None:
          self.banner_image_status = banner_image_status
        if avatar_image_status is not None:
          self.avatar_image_status = avatar_image_status
        if water_mark_image_status is not None:
          self.water_mark_image_status = water_mark_image_status
        if channel_detail is not None:
          self.channel_detail = channel_detail
        if email_contact is not None:
          self.email_contact = email_contact
        if link_social is not None:
          self.link_social = link_social
        if keywords is not None:
          self.keywords = keywords
        if channel_content is not None:
          self.channel_content = channel_content
        if description is not None:
          self.description = description
        if desc_status is not None:
          self.desc_status = desc_status
        if last_seo is not None:
          self.last_seo = last_seo
        if seo_state is not None:
          self.seo_state = seo_state
        if current_state is not None:
          self.current_state = current_state
        if img_types is not None:
          self.img_types = img_types
        if active is not None:
          self.active = active
        if template_used is not None:
          self.template_used = template_used
        if singer_img_used is not None:
          self.singer_img_used = singer_img_used
        if data_decor_layout is not None:
          self.data_decor_layout = data_decor_layout
        if status_decor_layout is not None:
          self.status_decor_layout = status_decor_layout
        if status_update_branding is not None:
          self.status_update_branding = status_update_branding
        if private_data is not None:
          self.private_data = private_data
        if channel_type is not None:
          self.channel_type = channel_type
        if id is not None:
          self.id = id
        if account_id is not None:
          self.account_id = account_id
        if topic_id is not None:
          self.topic_id = topic_id
        if country_id is not None:
          self.country_id = country_id
        if language_id is not None:
          self.language_id = language_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if server_id is not None:
          self.server_id = server_id
        if music_genre_id is not None:
          self.music_genre_id = music_genre_id

    @property
    def email(self):
        """
        Gets the email of this Channel.

        :return: The email of this Channel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Channel.

        :param email: The email of this Channel.
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """
        Gets the password of this Channel.

        :return: The password of this Channel.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this Channel.

        :param password: The password of this Channel.
        :type: str
        """

        self._password = password

    @property
    def channel_id(self):
        """
        Gets the channel_id of this Channel.

        :return: The channel_id of this Channel.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this Channel.

        :param channel_id: The channel_id of this Channel.
        :type: str
        """

        self._channel_id = channel_id

    @property
    def name_of_channel(self):
        """
        Gets the name_of_channel of this Channel.

        :return: The name_of_channel of this Channel.
        :rtype: str
        """
        return self._name_of_channel

    @name_of_channel.setter
    def name_of_channel(self, name_of_channel):
        """
        Sets the name_of_channel of this Channel.

        :param name_of_channel: The name_of_channel of this Channel.
        :type: str
        """

        self._name_of_channel = name_of_channel

    @property
    def cookie(self):
        """
        Gets the cookie of this Channel.

        :return: The cookie of this Channel.
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """
        Sets the cookie of this Channel.

        :param cookie: The cookie of this Channel.
        :type: str
        """

        self._cookie = cookie

    @property
    def meta_data(self):
        """
        Gets the meta_data of this Channel.

        :return: The meta_data of this Channel.
        :rtype: str
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """
        Sets the meta_data of this Channel.

        :param meta_data: The meta_data of this Channel.
        :type: str
        """

        self._meta_data = meta_data

    @property
    def max_video_publish_perday(self):
        """
        Gets the max_video_publish_perday of this Channel.

        :return: The max_video_publish_perday of this Channel.
        :rtype: float
        """
        return self._max_video_publish_perday

    @max_video_publish_perday.setter
    def max_video_publish_perday(self, max_video_publish_perday):
        """
        Sets the max_video_publish_perday of this Channel.

        :param max_video_publish_perday: The max_video_publish_perday of this Channel.
        :type: float
        """

        self._max_video_publish_perday = max_video_publish_perday

    @property
    def schedule_start(self):
        """
        Gets the schedule_start of this Channel.

        :return: The schedule_start of this Channel.
        :rtype: str
        """
        return self._schedule_start

    @schedule_start.setter
    def schedule_start(self, schedule_start):
        """
        Sets the schedule_start of this Channel.

        :param schedule_start: The schedule_start of this Channel.
        :type: str
        """

        self._schedule_start = schedule_start

    @property
    def schedule_end(self):
        """
        Gets the schedule_end of this Channel.

        :return: The schedule_end of this Channel.
        :rtype: str
        """
        return self._schedule_end

    @schedule_end.setter
    def schedule_end(self, schedule_end):
        """
        Sets the schedule_end of this Channel.

        :param schedule_end: The schedule_end of this Channel.
        :type: str
        """

        self._schedule_end = schedule_end

    @property
    def publish(self):
        """
        Gets the publish of this Channel.

        :return: The publish of this Channel.
        :rtype: str
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """
        Sets the publish of this Channel.

        :param publish: The publish of this Channel.
        :type: str
        """

        self._publish = publish

    @property
    def day_public(self):
        """
        Gets the day_public of this Channel.

        :return: The day_public of this Channel.
        :rtype: float
        """
        return self._day_public

    @day_public.setter
    def day_public(self, day_public):
        """
        Sets the day_public of this Channel.

        :param day_public: The day_public of this Channel.
        :type: float
        """

        self._day_public = day_public

    @property
    def current_num_video_uploaded(self):
        """
        Gets the current_num_video_uploaded of this Channel.

        :return: The current_num_video_uploaded of this Channel.
        :rtype: float
        """
        return self._current_num_video_uploaded

    @current_num_video_uploaded.setter
    def current_num_video_uploaded(self, current_num_video_uploaded):
        """
        Sets the current_num_video_uploaded of this Channel.

        :param current_num_video_uploaded: The current_num_video_uploaded of this Channel.
        :type: float
        """

        self._current_num_video_uploaded = current_num_video_uploaded

    @property
    def last_upload_time(self):
        """
        Gets the last_upload_time of this Channel.

        :return: The last_upload_time of this Channel.
        :rtype: datetime
        """
        return self._last_upload_time

    @last_upload_time.setter
    def last_upload_time(self, last_upload_time):
        """
        Sets the last_upload_time of this Channel.

        :param last_upload_time: The last_upload_time of this Channel.
        :type: datetime
        """

        self._last_upload_time = last_upload_time

    @property
    def total_video(self):
        """
        Gets the total_video of this Channel.

        :return: The total_video of this Channel.
        :rtype: float
        """
        return self._total_video

    @total_video.setter
    def total_video(self, total_video):
        """
        Sets the total_video of this Channel.

        :param total_video: The total_video of this Channel.
        :type: float
        """

        self._total_video = total_video

    @property
    def total_video_upload(self):
        """
        Gets the total_video_upload of this Channel.

        :return: The total_video_upload of this Channel.
        :rtype: float
        """
        return self._total_video_upload

    @total_video_upload.setter
    def total_video_upload(self, total_video_upload):
        """
        Sets the total_video_upload of this Channel.

        :param total_video_upload: The total_video_upload of this Channel.
        :type: float
        """

        self._total_video_upload = total_video_upload

    @property
    def total_video_error(self):
        """
        Gets the total_video_error of this Channel.

        :return: The total_video_error of this Channel.
        :rtype: float
        """
        return self._total_video_error

    @total_video_error.setter
    def total_video_error(self, total_video_error):
        """
        Sets the total_video_error of this Channel.

        :param total_video_error: The total_video_error of this Channel.
        :type: float
        """

        self._total_video_error = total_video_error

    @property
    def status(self):
        """
        Gets the status of this Channel.

        :return: The status of this Channel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Channel.

        :param status: The status of this Channel.
        :type: str
        """

        self._status = status

    @property
    def run(self):
        """
        Gets the run of this Channel.

        :return: The run of this Channel.
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """
        Sets the run of this Channel.

        :param run: The run of this Channel.
        :type: str
        """

        self._run = run

    @property
    def cookie_state(self):
        """
        Gets the cookie_state of this Channel.

        :return: The cookie_state of this Channel.
        :rtype: str
        """
        return self._cookie_state

    @cookie_state.setter
    def cookie_state(self, cookie_state):
        """
        Sets the cookie_state of this Channel.

        :param cookie_state: The cookie_state of this Channel.
        :type: str
        """

        self._cookie_state = cookie_state

    @property
    def period_upload(self):
        """
        Gets the period_upload of this Channel.

        :return: The period_upload of this Channel.
        :rtype: float
        """
        return self._period_upload

    @period_upload.setter
    def period_upload(self, period_upload):
        """
        Sets the period_upload of this Channel.

        :param period_upload: The period_upload of this Channel.
        :type: float
        """

        self._period_upload = period_upload

    @property
    def period_publish(self):
        """
        Gets the period_publish of this Channel.

        :return: The period_publish of this Channel.
        :rtype: float
        """
        return self._period_publish

    @period_publish.setter
    def period_publish(self, period_publish):
        """
        Sets the period_publish of this Channel.

        :param period_publish: The period_publish of this Channel.
        :type: float
        """

        self._period_publish = period_publish

    @property
    def is_publish_manual(self):
        """
        Gets the is_publish_manual of this Channel.

        :return: The is_publish_manual of this Channel.
        :rtype: bool
        """
        return self._is_publish_manual

    @is_publish_manual.setter
    def is_publish_manual(self, is_publish_manual):
        """
        Sets the is_publish_manual of this Channel.

        :param is_publish_manual: The is_publish_manual of this Channel.
        :type: bool
        """

        self._is_publish_manual = is_publish_manual

    @property
    def upload_time_at(self):
        """
        Gets the upload_time_at of this Channel.

        :return: The upload_time_at of this Channel.
        :rtype: datetime
        """
        return self._upload_time_at

    @upload_time_at.setter
    def upload_time_at(self, upload_time_at):
        """
        Sets the upload_time_at of this Channel.

        :param upload_time_at: The upload_time_at of this Channel.
        :type: datetime
        """

        self._upload_time_at = upload_time_at

    @property
    def channel_view(self):
        """
        Gets the channel_view of this Channel.

        :return: The channel_view of this Channel.
        :rtype: float
        """
        return self._channel_view

    @channel_view.setter
    def channel_view(self, channel_view):
        """
        Sets the channel_view of this Channel.

        :param channel_view: The channel_view of this Channel.
        :type: float
        """

        self._channel_view = channel_view

    @property
    def kids_content(self):
        """
        Gets the kids_content of this Channel.

        :return: The kids_content of this Channel.
        :rtype: bool
        """
        return self._kids_content

    @kids_content.setter
    def kids_content(self, kids_content):
        """
        Sets the kids_content of this Channel.

        :param kids_content: The kids_content of this Channel.
        :type: bool
        """

        self._kids_content = kids_content

    @property
    def copy_right_content(self):
        """
        Gets the copy_right_content of this Channel.

        :return: The copy_right_content of this Channel.
        :rtype: bool
        """
        return self._copy_right_content

    @copy_right_content.setter
    def copy_right_content(self, copy_right_content):
        """
        Sets the copy_right_content of this Channel.

        :param copy_right_content: The copy_right_content of this Channel.
        :type: bool
        """

        self._copy_right_content = copy_right_content

    @property
    def banner_image(self):
        """
        Gets the banner_image of this Channel.

        :return: The banner_image of this Channel.
        :rtype: str
        """
        return self._banner_image

    @banner_image.setter
    def banner_image(self, banner_image):
        """
        Sets the banner_image of this Channel.

        :param banner_image: The banner_image of this Channel.
        :type: str
        """

        self._banner_image = banner_image

    @property
    def avatar_image(self):
        """
        Gets the avatar_image of this Channel.

        :return: The avatar_image of this Channel.
        :rtype: str
        """
        return self._avatar_image

    @avatar_image.setter
    def avatar_image(self, avatar_image):
        """
        Sets the avatar_image of this Channel.

        :param avatar_image: The avatar_image of this Channel.
        :type: str
        """

        self._avatar_image = avatar_image

    @property
    def water_mark_image(self):
        """
        Gets the water_mark_image of this Channel.

        :return: The water_mark_image of this Channel.
        :rtype: str
        """
        return self._water_mark_image

    @water_mark_image.setter
    def water_mark_image(self, water_mark_image):
        """
        Sets the water_mark_image of this Channel.

        :param water_mark_image: The water_mark_image of this Channel.
        :type: str
        """

        self._water_mark_image = water_mark_image

    @property
    def banner_image_status(self):
        """
        Gets the banner_image_status of this Channel.

        :return: The banner_image_status of this Channel.
        :rtype: bool
        """
        return self._banner_image_status

    @banner_image_status.setter
    def banner_image_status(self, banner_image_status):
        """
        Sets the banner_image_status of this Channel.

        :param banner_image_status: The banner_image_status of this Channel.
        :type: bool
        """

        self._banner_image_status = banner_image_status

    @property
    def avatar_image_status(self):
        """
        Gets the avatar_image_status of this Channel.

        :return: The avatar_image_status of this Channel.
        :rtype: bool
        """
        return self._avatar_image_status

    @avatar_image_status.setter
    def avatar_image_status(self, avatar_image_status):
        """
        Sets the avatar_image_status of this Channel.

        :param avatar_image_status: The avatar_image_status of this Channel.
        :type: bool
        """

        self._avatar_image_status = avatar_image_status

    @property
    def water_mark_image_status(self):
        """
        Gets the water_mark_image_status of this Channel.

        :return: The water_mark_image_status of this Channel.
        :rtype: bool
        """
        return self._water_mark_image_status

    @water_mark_image_status.setter
    def water_mark_image_status(self, water_mark_image_status):
        """
        Sets the water_mark_image_status of this Channel.

        :param water_mark_image_status: The water_mark_image_status of this Channel.
        :type: bool
        """

        self._water_mark_image_status = water_mark_image_status

    @property
    def channel_detail(self):
        """
        Gets the channel_detail of this Channel.

        :return: The channel_detail of this Channel.
        :rtype: str
        """
        return self._channel_detail

    @channel_detail.setter
    def channel_detail(self, channel_detail):
        """
        Sets the channel_detail of this Channel.

        :param channel_detail: The channel_detail of this Channel.
        :type: str
        """

        self._channel_detail = channel_detail

    @property
    def email_contact(self):
        """
        Gets the email_contact of this Channel.

        :return: The email_contact of this Channel.
        :rtype: str
        """
        return self._email_contact

    @email_contact.setter
    def email_contact(self, email_contact):
        """
        Sets the email_contact of this Channel.

        :param email_contact: The email_contact of this Channel.
        :type: str
        """

        self._email_contact = email_contact

    @property
    def link_social(self):
        """
        Gets the link_social of this Channel.

        :return: The link_social of this Channel.
        :rtype: list[str]
        """
        return self._link_social

    @link_social.setter
    def link_social(self, link_social):
        """
        Sets the link_social of this Channel.

        :param link_social: The link_social of this Channel.
        :type: list[str]
        """

        self._link_social = link_social

    @property
    def keywords(self):
        """
        Gets the keywords of this Channel.

        :return: The keywords of this Channel.
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this Channel.

        :param keywords: The keywords of this Channel.
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def channel_content(self):
        """
        Gets the channel_content of this Channel.

        :return: The channel_content of this Channel.
        :rtype: str
        """
        return self._channel_content

    @channel_content.setter
    def channel_content(self, channel_content):
        """
        Sets the channel_content of this Channel.

        :param channel_content: The channel_content of this Channel.
        :type: str
        """

        self._channel_content = channel_content

    @property
    def description(self):
        """
        Gets the description of this Channel.

        :return: The description of this Channel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Channel.

        :param description: The description of this Channel.
        :type: str
        """

        self._description = description

    @property
    def desc_status(self):
        """
        Gets the desc_status of this Channel.

        :return: The desc_status of this Channel.
        :rtype: bool
        """
        return self._desc_status

    @desc_status.setter
    def desc_status(self, desc_status):
        """
        Sets the desc_status of this Channel.

        :param desc_status: The desc_status of this Channel.
        :type: bool
        """

        self._desc_status = desc_status

    @property
    def last_seo(self):
        """
        Gets the last_seo of this Channel.

        :return: The last_seo of this Channel.
        :rtype: datetime
        """
        return self._last_seo

    @last_seo.setter
    def last_seo(self, last_seo):
        """
        Sets the last_seo of this Channel.

        :param last_seo: The last_seo of this Channel.
        :type: datetime
        """

        self._last_seo = last_seo

    @property
    def seo_state(self):
        """
        Gets the seo_state of this Channel.

        :return: The seo_state of this Channel.
        :rtype: str
        """
        return self._seo_state

    @seo_state.setter
    def seo_state(self, seo_state):
        """
        Sets the seo_state of this Channel.

        :param seo_state: The seo_state of this Channel.
        :type: str
        """

        self._seo_state = seo_state

    @property
    def current_state(self):
        """
        Gets the current_state of this Channel.

        :return: The current_state of this Channel.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """
        Sets the current_state of this Channel.

        :param current_state: The current_state of this Channel.
        :type: str
        """

        self._current_state = current_state

    @property
    def img_types(self):
        """
        Gets the img_types of this Channel.

        :return: The img_types of this Channel.
        :rtype: list[str]
        """
        return self._img_types

    @img_types.setter
    def img_types(self, img_types):
        """
        Sets the img_types of this Channel.

        :param img_types: The img_types of this Channel.
        :type: list[str]
        """

        self._img_types = img_types

    @property
    def active(self):
        """
        Gets the active of this Channel.

        :return: The active of this Channel.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Channel.

        :param active: The active of this Channel.
        :type: bool
        """

        self._active = active

    @property
    def template_used(self):
        """
        Gets the template_used of this Channel.

        :return: The template_used of this Channel.
        :rtype: str
        """
        return self._template_used

    @template_used.setter
    def template_used(self, template_used):
        """
        Sets the template_used of this Channel.

        :param template_used: The template_used of this Channel.
        :type: str
        """

        self._template_used = template_used

    @property
    def singer_img_used(self):
        """
        Gets the singer_img_used of this Channel.

        :return: The singer_img_used of this Channel.
        :rtype: str
        """
        return self._singer_img_used

    @singer_img_used.setter
    def singer_img_used(self, singer_img_used):
        """
        Sets the singer_img_used of this Channel.

        :param singer_img_used: The singer_img_used of this Channel.
        :type: str
        """

        self._singer_img_used = singer_img_used

    @property
    def data_decor_layout(self):
        """
        Gets the data_decor_layout of this Channel.

        :return: The data_decor_layout of this Channel.
        :rtype: list[object]
        """
        return self._data_decor_layout

    @data_decor_layout.setter
    def data_decor_layout(self, data_decor_layout):
        """
        Sets the data_decor_layout of this Channel.

        :param data_decor_layout: The data_decor_layout of this Channel.
        :type: list[object]
        """

        self._data_decor_layout = data_decor_layout

    @property
    def status_decor_layout(self):
        """
        Gets the status_decor_layout of this Channel.

        :return: The status_decor_layout of this Channel.
        :rtype: bool
        """
        return self._status_decor_layout

    @status_decor_layout.setter
    def status_decor_layout(self, status_decor_layout):
        """
        Sets the status_decor_layout of this Channel.

        :param status_decor_layout: The status_decor_layout of this Channel.
        :type: bool
        """

        self._status_decor_layout = status_decor_layout

    @property
    def status_update_branding(self):
        """
        Gets the status_update_branding of this Channel.

        :return: The status_update_branding of this Channel.
        :rtype: str
        """
        return self._status_update_branding

    @status_update_branding.setter
    def status_update_branding(self, status_update_branding):
        """
        Sets the status_update_branding of this Channel.

        :param status_update_branding: The status_update_branding of this Channel.
        :type: str
        """

        self._status_update_branding = status_update_branding

    @property
    def private_data(self):
        """
        Gets the private_data of this Channel.

        :return: The private_data of this Channel.
        :rtype: str
        """
        return self._private_data

    @private_data.setter
    def private_data(self, private_data):
        """
        Sets the private_data of this Channel.

        :param private_data: The private_data of this Channel.
        :type: str
        """

        self._private_data = private_data

    @property
    def channel_type(self):
        """
        Gets the channel_type of this Channel.

        :return: The channel_type of this Channel.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """
        Sets the channel_type of this Channel.

        :param channel_type: The channel_type of this Channel.
        :type: str
        """

        self._channel_type = channel_type

    @property
    def id(self):
        """
        Gets the id of this Channel.

        :return: The id of this Channel.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Channel.

        :param id: The id of this Channel.
        :type: float
        """

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this Channel.

        :return: The account_id of this Channel.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Channel.

        :param account_id: The account_id of this Channel.
        :type: float
        """

        self._account_id = account_id

    @property
    def topic_id(self):
        """
        Gets the topic_id of this Channel.

        :return: The topic_id of this Channel.
        :rtype: float
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """
        Sets the topic_id of this Channel.

        :param topic_id: The topic_id of this Channel.
        :type: float
        """

        self._topic_id = topic_id

    @property
    def country_id(self):
        """
        Gets the country_id of this Channel.

        :return: The country_id of this Channel.
        :rtype: float
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this Channel.

        :param country_id: The country_id of this Channel.
        :type: float
        """

        self._country_id = country_id

    @property
    def language_id(self):
        """
        Gets the language_id of this Channel.

        :return: The language_id of this Channel.
        :rtype: float
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """
        Sets the language_id of this Channel.

        :param language_id: The language_id of this Channel.
        :type: float
        """

        self._language_id = language_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Channel.

        :return: The created_at of this Channel.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Channel.

        :param created_at: The created_at of this Channel.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Channel.

        :return: The updated_at of this Channel.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Channel.

        :param updated_at: The updated_at of this Channel.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def server_id(self):
        """
        Gets the server_id of this Channel.

        :return: The server_id of this Channel.
        :rtype: float
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """
        Sets the server_id of this Channel.

        :param server_id: The server_id of this Channel.
        :type: float
        """

        self._server_id = server_id

    @property
    def music_genre_id(self):
        """
        Gets the music_genre_id of this Channel.

        :return: The music_genre_id of this Channel.
        :rtype: float
        """
        return self._music_genre_id

    @music_genre_id.setter
    def music_genre_id(self, music_genre_id):
        """
        Sets the music_genre_id of this Channel.

        :param music_genre_id: The music_genre_id of this Channel.
        :type: float
        """

        self._music_genre_id = music_genre_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Channel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
