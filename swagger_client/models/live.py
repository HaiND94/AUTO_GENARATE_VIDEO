# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Live(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'key': 'str',
        'video_id': 'str',
        'title': 'str',
        'description': 'str',
        'tag': 'str',
        'url': 'str',
        'type': 'str',
        'status': 'str',
        'start_time': 'datetime',
        'stop_time': 'datetime',
        'mode': 'str',
        'active': 'bool',
        'id': 'float',
        'account_id': 'float',
        'channel_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'ip': 'ip',
        'key': 'key',
        'video_id': 'videoId',
        'title': 'title',
        'description': 'description',
        'tag': 'tag',
        'url': 'url',
        'type': 'type',
        'status': 'status',
        'start_time': 'startTime',
        'stop_time': 'stopTime',
        'mode': 'mode',
        'active': 'active',
        'id': 'id',
        'account_id': 'accountId',
        'channel_id': 'channelId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, ip=None, key=None, video_id=None, title=None, description=None, tag=None, url=None, type=None, status='NEW', start_time=None, stop_time=None, mode=None, active=True, id=None, account_id=None, channel_id=None, created_at=None, updated_at=None):
        """
        Live - a model defined in Swagger
        """

        self._ip = None
        self._key = None
        self._video_id = None
        self._title = None
        self._description = None
        self._tag = None
        self._url = None
        self._type = None
        self._status = None
        self._start_time = None
        self._stop_time = None
        self._mode = None
        self._active = None
        self._id = None
        self._account_id = None
        self._channel_id = None
        self._created_at = None
        self._updated_at = None

        if ip is not None:
          self.ip = ip
        if key is not None:
          self.key = key
        if video_id is not None:
          self.video_id = video_id
        if title is not None:
          self.title = title
        if description is not None:
          self.description = description
        if tag is not None:
          self.tag = tag
        if url is not None:
          self.url = url
        if type is not None:
          self.type = type
        if status is not None:
          self.status = status
        if start_time is not None:
          self.start_time = start_time
        if stop_time is not None:
          self.stop_time = stop_time
        if mode is not None:
          self.mode = mode
        if active is not None:
          self.active = active
        if id is not None:
          self.id = id
        if account_id is not None:
          self.account_id = account_id
        if channel_id is not None:
          self.channel_id = channel_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def ip(self):
        """
        Gets the ip of this Live.

        :return: The ip of this Live.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this Live.

        :param ip: The ip of this Live.
        :type: str
        """

        self._ip = ip

    @property
    def key(self):
        """
        Gets the key of this Live.

        :return: The key of this Live.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Live.

        :param key: The key of this Live.
        :type: str
        """

        self._key = key

    @property
    def video_id(self):
        """
        Gets the video_id of this Live.

        :return: The video_id of this Live.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """
        Sets the video_id of this Live.

        :param video_id: The video_id of this Live.
        :type: str
        """

        self._video_id = video_id

    @property
    def title(self):
        """
        Gets the title of this Live.

        :return: The title of this Live.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Live.

        :param title: The title of this Live.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this Live.

        :return: The description of this Live.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Live.

        :param description: The description of this Live.
        :type: str
        """

        self._description = description

    @property
    def tag(self):
        """
        Gets the tag of this Live.

        :return: The tag of this Live.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Live.

        :param tag: The tag of this Live.
        :type: str
        """

        self._tag = tag

    @property
    def url(self):
        """
        Gets the url of this Live.

        :return: The url of this Live.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Live.

        :param url: The url of this Live.
        :type: str
        """

        self._url = url

    @property
    def type(self):
        """
        Gets the type of this Live.

        :return: The type of this Live.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Live.

        :param type: The type of this Live.
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """
        Gets the status of this Live.

        :return: The status of this Live.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Live.

        :param status: The status of this Live.
        :type: str
        """

        self._status = status

    @property
    def start_time(self):
        """
        Gets the start_time of this Live.

        :return: The start_time of this Live.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Live.

        :param start_time: The start_time of this Live.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def stop_time(self):
        """
        Gets the stop_time of this Live.

        :return: The stop_time of this Live.
        :rtype: datetime
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time):
        """
        Sets the stop_time of this Live.

        :param stop_time: The stop_time of this Live.
        :type: datetime
        """

        self._stop_time = stop_time

    @property
    def mode(self):
        """
        Gets the mode of this Live.

        :return: The mode of this Live.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this Live.

        :param mode: The mode of this Live.
        :type: str
        """

        self._mode = mode

    @property
    def active(self):
        """
        Gets the active of this Live.

        :return: The active of this Live.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Live.

        :param active: The active of this Live.
        :type: bool
        """

        self._active = active

    @property
    def id(self):
        """
        Gets the id of this Live.

        :return: The id of this Live.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Live.

        :param id: The id of this Live.
        :type: float
        """

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this Live.

        :return: The account_id of this Live.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Live.

        :param account_id: The account_id of this Live.
        :type: float
        """

        self._account_id = account_id

    @property
    def channel_id(self):
        """
        Gets the channel_id of this Live.

        :return: The channel_id of this Live.
        :rtype: float
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this Live.

        :param channel_id: The channel_id of this Live.
        :type: float
        """

        self._channel_id = channel_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Live.

        :return: The created_at of this Live.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Live.

        :param created_at: The created_at of this Live.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Live.

        :return: The updated_at of this Live.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Live.

        :param updated_at: The updated_at of this Live.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Live):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
