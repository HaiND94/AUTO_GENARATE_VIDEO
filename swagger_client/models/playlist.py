# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Playlist(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'playlist_id': 'str',
        'state': 'str',
        'kind': 'str',
        'action': 'str',
        'id': 'float',
        'channel_id': 'float',
        'account_id': 'float',
        'singer_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'sub_category_id': 'float',
        'channel_pll_id': 'float'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'playlist_id': 'playlistId',
        'state': 'state',
        'kind': 'kind',
        'action': 'action',
        'id': 'id',
        'channel_id': 'channelId',
        'account_id': 'accountId',
        'singer_id': 'singerId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'sub_category_id': 'subCategoryId',
        'channel_pll_id': 'channelPllId'
    }

    def __init__(self, name=None, description=None, playlist_id=None, state='UNLOCK', kind=None, action='NON', id=None, channel_id=None, account_id=None, singer_id=None, created_at=None, updated_at=None, sub_category_id=None, channel_pll_id=None):
        """
        Playlist - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._playlist_id = None
        self._state = None
        self._kind = None
        self._action = None
        self._id = None
        self._channel_id = None
        self._account_id = None
        self._singer_id = None
        self._created_at = None
        self._updated_at = None
        self._sub_category_id = None
        self._channel_pll_id = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if playlist_id is not None:
          self.playlist_id = playlist_id
        if state is not None:
          self.state = state
        if kind is not None:
          self.kind = kind
        if action is not None:
          self.action = action
        if id is not None:
          self.id = id
        if channel_id is not None:
          self.channel_id = channel_id
        if account_id is not None:
          self.account_id = account_id
        if singer_id is not None:
          self.singer_id = singer_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if sub_category_id is not None:
          self.sub_category_id = sub_category_id
        if channel_pll_id is not None:
          self.channel_pll_id = channel_pll_id

    @property
    def name(self):
        """
        Gets the name of this Playlist.

        :return: The name of this Playlist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Playlist.

        :param name: The name of this Playlist.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Playlist.

        :return: The description of this Playlist.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Playlist.

        :param description: The description of this Playlist.
        :type: str
        """

        self._description = description

    @property
    def playlist_id(self):
        """
        Gets the playlist_id of this Playlist.

        :return: The playlist_id of this Playlist.
        :rtype: str
        """
        return self._playlist_id

    @playlist_id.setter
    def playlist_id(self, playlist_id):
        """
        Sets the playlist_id of this Playlist.

        :param playlist_id: The playlist_id of this Playlist.
        :type: str
        """

        self._playlist_id = playlist_id

    @property
    def state(self):
        """
        Gets the state of this Playlist.

        :return: The state of this Playlist.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Playlist.

        :param state: The state of this Playlist.
        :type: str
        """

        self._state = state

    @property
    def kind(self):
        """
        Gets the kind of this Playlist.

        :return: The kind of this Playlist.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this Playlist.

        :param kind: The kind of this Playlist.
        :type: str
        """

        self._kind = kind

    @property
    def action(self):
        """
        Gets the action of this Playlist.

        :return: The action of this Playlist.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this Playlist.

        :param action: The action of this Playlist.
        :type: str
        """

        self._action = action

    @property
    def id(self):
        """
        Gets the id of this Playlist.

        :return: The id of this Playlist.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Playlist.

        :param id: The id of this Playlist.
        :type: float
        """

        self._id = id

    @property
    def channel_id(self):
        """
        Gets the channel_id of this Playlist.

        :return: The channel_id of this Playlist.
        :rtype: float
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this Playlist.

        :param channel_id: The channel_id of this Playlist.
        :type: float
        """

        self._channel_id = channel_id

    @property
    def account_id(self):
        """
        Gets the account_id of this Playlist.

        :return: The account_id of this Playlist.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Playlist.

        :param account_id: The account_id of this Playlist.
        :type: float
        """

        self._account_id = account_id

    @property
    def singer_id(self):
        """
        Gets the singer_id of this Playlist.

        :return: The singer_id of this Playlist.
        :rtype: float
        """
        return self._singer_id

    @singer_id.setter
    def singer_id(self, singer_id):
        """
        Sets the singer_id of this Playlist.

        :param singer_id: The singer_id of this Playlist.
        :type: float
        """

        self._singer_id = singer_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Playlist.

        :return: The created_at of this Playlist.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Playlist.

        :param created_at: The created_at of this Playlist.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Playlist.

        :return: The updated_at of this Playlist.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Playlist.

        :param updated_at: The updated_at of this Playlist.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def sub_category_id(self):
        """
        Gets the sub_category_id of this Playlist.

        :return: The sub_category_id of this Playlist.
        :rtype: float
        """
        return self._sub_category_id

    @sub_category_id.setter
    def sub_category_id(self, sub_category_id):
        """
        Sets the sub_category_id of this Playlist.

        :param sub_category_id: The sub_category_id of this Playlist.
        :type: float
        """

        self._sub_category_id = sub_category_id

    @property
    def channel_pll_id(self):
        """
        Gets the channel_pll_id of this Playlist.

        :return: The channel_pll_id of this Playlist.
        :rtype: float
        """
        return self._channel_pll_id

    @channel_pll_id.setter
    def channel_pll_id(self, channel_pll_id):
        """
        Sets the channel_pll_id of this Playlist.

        :param channel_pll_id: The channel_pll_id of this Playlist.
        :type: float
        """

        self._channel_pll_id = channel_pll_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Playlist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
