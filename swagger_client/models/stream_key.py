# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StreamKey(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ingestion_id': 'str',
        'key': 'str',
        'name': 'str',
        'status': 'str',
        'id': 'float',
        'video_live_stream_id': 'float',
        'channel_id': 'float'
    }

    attribute_map = {
        'ingestion_id': 'ingestionId',
        'key': 'key',
        'name': 'name',
        'status': 'status',
        'id': 'id',
        'video_live_stream_id': 'videoLiveStreamId',
        'channel_id': 'channelId'
    }

    def __init__(self, ingestion_id=None, key=None, name=None, status=None, id=None, video_live_stream_id=None, channel_id=None):
        """
        StreamKey - a model defined in Swagger
        """

        self._ingestion_id = None
        self._key = None
        self._name = None
        self._status = None
        self._id = None
        self._video_live_stream_id = None
        self._channel_id = None

        if ingestion_id is not None:
          self.ingestion_id = ingestion_id
        if key is not None:
          self.key = key
        if name is not None:
          self.name = name
        if status is not None:
          self.status = status
        if id is not None:
          self.id = id
        if video_live_stream_id is not None:
          self.video_live_stream_id = video_live_stream_id
        if channel_id is not None:
          self.channel_id = channel_id

    @property
    def ingestion_id(self):
        """
        Gets the ingestion_id of this StreamKey.

        :return: The ingestion_id of this StreamKey.
        :rtype: str
        """
        return self._ingestion_id

    @ingestion_id.setter
    def ingestion_id(self, ingestion_id):
        """
        Sets the ingestion_id of this StreamKey.

        :param ingestion_id: The ingestion_id of this StreamKey.
        :type: str
        """

        self._ingestion_id = ingestion_id

    @property
    def key(self):
        """
        Gets the key of this StreamKey.

        :return: The key of this StreamKey.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this StreamKey.

        :param key: The key of this StreamKey.
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """
        Gets the name of this StreamKey.

        :return: The name of this StreamKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StreamKey.

        :param name: The name of this StreamKey.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this StreamKey.

        :return: The status of this StreamKey.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this StreamKey.

        :param status: The status of this StreamKey.
        :type: str
        """

        self._status = status

    @property
    def id(self):
        """
        Gets the id of this StreamKey.

        :return: The id of this StreamKey.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StreamKey.

        :param id: The id of this StreamKey.
        :type: float
        """

        self._id = id

    @property
    def video_live_stream_id(self):
        """
        Gets the video_live_stream_id of this StreamKey.

        :return: The video_live_stream_id of this StreamKey.
        :rtype: float
        """
        return self._video_live_stream_id

    @video_live_stream_id.setter
    def video_live_stream_id(self, video_live_stream_id):
        """
        Sets the video_live_stream_id of this StreamKey.

        :param video_live_stream_id: The video_live_stream_id of this StreamKey.
        :type: float
        """

        self._video_live_stream_id = video_live_stream_id

    @property
    def channel_id(self):
        """
        Gets the channel_id of this StreamKey.

        :return: The channel_id of this StreamKey.
        :rtype: float
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this StreamKey.

        :param channel_id: The channel_id of this StreamKey.
        :type: float
        """

        self._channel_id = channel_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StreamKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
