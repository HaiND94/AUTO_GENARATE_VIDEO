# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AlbumSpotify(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_spotify': 'str',
        'status': 'bool',
        'id': 'float',
        'singer_id': 'float',
        'music_genre_id': 'float'
    }

    attribute_map = {
        'id_spotify': 'idSpotify',
        'status': 'status',
        'id': 'id',
        'singer_id': 'singerId',
        'music_genre_id': 'musicGenreId'
    }

    def __init__(self, id_spotify=None, status=None, id=None, singer_id=None, music_genre_id=None):
        """
        AlbumSpotify - a model defined in Swagger
        """

        self._id_spotify = None
        self._status = None
        self._id = None
        self._singer_id = None
        self._music_genre_id = None

        if id_spotify is not None:
          self.id_spotify = id_spotify
        if status is not None:
          self.status = status
        if id is not None:
          self.id = id
        if singer_id is not None:
          self.singer_id = singer_id
        if music_genre_id is not None:
          self.music_genre_id = music_genre_id

    @property
    def id_spotify(self):
        """
        Gets the id_spotify of this AlbumSpotify.

        :return: The id_spotify of this AlbumSpotify.
        :rtype: str
        """
        return self._id_spotify

    @id_spotify.setter
    def id_spotify(self, id_spotify):
        """
        Sets the id_spotify of this AlbumSpotify.

        :param id_spotify: The id_spotify of this AlbumSpotify.
        :type: str
        """

        self._id_spotify = id_spotify

    @property
    def status(self):
        """
        Gets the status of this AlbumSpotify.

        :return: The status of this AlbumSpotify.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AlbumSpotify.

        :param status: The status of this AlbumSpotify.
        :type: bool
        """

        self._status = status

    @property
    def id(self):
        """
        Gets the id of this AlbumSpotify.

        :return: The id of this AlbumSpotify.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AlbumSpotify.

        :param id: The id of this AlbumSpotify.
        :type: float
        """

        self._id = id

    @property
    def singer_id(self):
        """
        Gets the singer_id of this AlbumSpotify.

        :return: The singer_id of this AlbumSpotify.
        :rtype: float
        """
        return self._singer_id

    @singer_id.setter
    def singer_id(self, singer_id):
        """
        Sets the singer_id of this AlbumSpotify.

        :param singer_id: The singer_id of this AlbumSpotify.
        :type: float
        """

        self._singer_id = singer_id

    @property
    def music_genre_id(self):
        """
        Gets the music_genre_id of this AlbumSpotify.

        :return: The music_genre_id of this AlbumSpotify.
        :rtype: float
        """
        return self._music_genre_id

    @music_genre_id.setter
    def music_genre_id(self, music_genre_id):
        """
        Sets the music_genre_id of this AlbumSpotify.

        :param music_genre_id: The music_genre_id of this AlbumSpotify.
        :type: float
        """

        self._music_genre_id = music_genre_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlbumSpotify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
