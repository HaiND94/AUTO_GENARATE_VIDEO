# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageClean(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'type': 'str',
        'object_type': 'str',
        'total_rating': 'float',
        'numbers_of_rating': 'float',
        'meta_data': 'object',
        'hash': 'str',
        'status': 'str',
        'id': 'float',
        'account_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'singer_id': 'float',
        'author_id': 'float',
        'category_id': 'float',
        'country_id': 'float'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'type': 'type',
        'object_type': 'objectType',
        'total_rating': 'totalRating',
        'numbers_of_rating': 'numbersOfRating',
        'meta_data': 'metaData',
        'hash': 'hash',
        'status': 'status',
        'id': 'id',
        'account_id': 'accountId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'singer_id': 'singerId',
        'author_id': 'authorId',
        'category_id': 'categoryId',
        'country_id': 'countryId'
    }

    def __init__(self, name=None, url=None, type=None, object_type=None, total_rating=0.0, numbers_of_rating=0.0, meta_data=None, hash=None, status=None, id=None, account_id=None, created_at=None, updated_at=None, singer_id=None, author_id=None, category_id=None, country_id=None):
        """
        ImageClean - a model defined in Swagger
        """

        self._name = None
        self._url = None
        self._type = None
        self._object_type = None
        self._total_rating = None
        self._numbers_of_rating = None
        self._meta_data = None
        self._hash = None
        self._status = None
        self._id = None
        self._account_id = None
        self._created_at = None
        self._updated_at = None
        self._singer_id = None
        self._author_id = None
        self._category_id = None
        self._country_id = None

        if name is not None:
          self.name = name
        if url is not None:
          self.url = url
        if type is not None:
          self.type = type
        if object_type is not None:
          self.object_type = object_type
        if total_rating is not None:
          self.total_rating = total_rating
        if numbers_of_rating is not None:
          self.numbers_of_rating = numbers_of_rating
        if meta_data is not None:
          self.meta_data = meta_data
        if hash is not None:
          self.hash = hash
        if status is not None:
          self.status = status
        if id is not None:
          self.id = id
        if account_id is not None:
          self.account_id = account_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if singer_id is not None:
          self.singer_id = singer_id
        if author_id is not None:
          self.author_id = author_id
        if category_id is not None:
          self.category_id = category_id
        if country_id is not None:
          self.country_id = country_id

    @property
    def name(self):
        """
        Gets the name of this ImageClean.

        :return: The name of this ImageClean.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ImageClean.

        :param name: The name of this ImageClean.
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """
        Gets the url of this ImageClean.

        :return: The url of this ImageClean.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ImageClean.

        :param url: The url of this ImageClean.
        :type: str
        """

        self._url = url

    @property
    def type(self):
        """
        Gets the type of this ImageClean.

        :return: The type of this ImageClean.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ImageClean.

        :param type: The type of this ImageClean.
        :type: str
        """

        self._type = type

    @property
    def object_type(self):
        """
        Gets the object_type of this ImageClean.

        :return: The object_type of this ImageClean.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this ImageClean.

        :param object_type: The object_type of this ImageClean.
        :type: str
        """

        self._object_type = object_type

    @property
    def total_rating(self):
        """
        Gets the total_rating of this ImageClean.

        :return: The total_rating of this ImageClean.
        :rtype: float
        """
        return self._total_rating

    @total_rating.setter
    def total_rating(self, total_rating):
        """
        Sets the total_rating of this ImageClean.

        :param total_rating: The total_rating of this ImageClean.
        :type: float
        """

        self._total_rating = total_rating

    @property
    def numbers_of_rating(self):
        """
        Gets the numbers_of_rating of this ImageClean.

        :return: The numbers_of_rating of this ImageClean.
        :rtype: float
        """
        return self._numbers_of_rating

    @numbers_of_rating.setter
    def numbers_of_rating(self, numbers_of_rating):
        """
        Sets the numbers_of_rating of this ImageClean.

        :param numbers_of_rating: The numbers_of_rating of this ImageClean.
        :type: float
        """

        self._numbers_of_rating = numbers_of_rating

    @property
    def meta_data(self):
        """
        Gets the meta_data of this ImageClean.

        :return: The meta_data of this ImageClean.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """
        Sets the meta_data of this ImageClean.

        :param meta_data: The meta_data of this ImageClean.
        :type: object
        """

        self._meta_data = meta_data

    @property
    def hash(self):
        """
        Gets the hash of this ImageClean.

        :return: The hash of this ImageClean.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this ImageClean.

        :param hash: The hash of this ImageClean.
        :type: str
        """

        self._hash = hash

    @property
    def status(self):
        """
        Gets the status of this ImageClean.

        :return: The status of this ImageClean.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ImageClean.

        :param status: The status of this ImageClean.
        :type: str
        """

        self._status = status

    @property
    def id(self):
        """
        Gets the id of this ImageClean.

        :return: The id of this ImageClean.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ImageClean.

        :param id: The id of this ImageClean.
        :type: float
        """

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this ImageClean.

        :return: The account_id of this ImageClean.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this ImageClean.

        :param account_id: The account_id of this ImageClean.
        :type: float
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """
        Gets the created_at of this ImageClean.

        :return: The created_at of this ImageClean.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ImageClean.

        :param created_at: The created_at of this ImageClean.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ImageClean.

        :return: The updated_at of this ImageClean.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ImageClean.

        :param updated_at: The updated_at of this ImageClean.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def singer_id(self):
        """
        Gets the singer_id of this ImageClean.

        :return: The singer_id of this ImageClean.
        :rtype: float
        """
        return self._singer_id

    @singer_id.setter
    def singer_id(self, singer_id):
        """
        Sets the singer_id of this ImageClean.

        :param singer_id: The singer_id of this ImageClean.
        :type: float
        """

        self._singer_id = singer_id

    @property
    def author_id(self):
        """
        Gets the author_id of this ImageClean.

        :return: The author_id of this ImageClean.
        :rtype: float
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """
        Sets the author_id of this ImageClean.

        :param author_id: The author_id of this ImageClean.
        :type: float
        """

        self._author_id = author_id

    @property
    def category_id(self):
        """
        Gets the category_id of this ImageClean.

        :return: The category_id of this ImageClean.
        :rtype: float
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this ImageClean.

        :param category_id: The category_id of this ImageClean.
        :type: float
        """

        self._category_id = category_id

    @property
    def country_id(self):
        """
        Gets the country_id of this ImageClean.

        :return: The country_id of this ImageClean.
        :rtype: float
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this ImageClean.

        :param country_id: The country_id of this ImageClean.
        :type: float
        """

        self._country_id = country_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageClean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
