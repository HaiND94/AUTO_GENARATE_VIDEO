# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChannelPll(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_sub_channels': 'list[TaskSubChannel]',
        'email': 'str',
        'password': 'str',
        'channel_id': 'str',
        'name_of_channel': 'str',
        'cookie': 'str',
        'meta_data': 'str',
        'status': 'str',
        'run': 'str',
        'cookie_state': 'str',
        'kids_content': 'bool',
        'banner_image': 'str',
        'avatar_image': 'str',
        'water_mark_image': 'str',
        'keywords': 'list[str]',
        'description': 'str',
        'last_seo': 'datetime',
        'seo_state': 'str',
        'current_state': 'str',
        'active': 'bool',
        'last_create_pll_time': 'str',
        'id': 'float',
        'server_id': 'float',
        'account_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'task_sub_channels': 'taskSubChannels',
        'email': 'email',
        'password': 'password',
        'channel_id': 'channelId',
        'name_of_channel': 'nameOfChannel',
        'cookie': 'cookie',
        'meta_data': 'metaData',
        'status': 'status',
        'run': 'run',
        'cookie_state': 'cookieState',
        'kids_content': 'kidsContent',
        'banner_image': 'bannerImage',
        'avatar_image': 'avatarImage',
        'water_mark_image': 'waterMarkImage',
        'keywords': 'keywords',
        'description': 'description',
        'last_seo': 'lastSeo',
        'seo_state': 'seoState',
        'current_state': 'currentState',
        'active': 'active',
        'last_create_pll_time': 'lastCreatePllTime',
        'id': 'id',
        'server_id': 'serverId',
        'account_id': 'accountId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, task_sub_channels=None, email=None, password=None, channel_id=None, name_of_channel=None, cookie=None, meta_data=None, status=None, run='START', cookie_state=None, kids_content=None, banner_image=None, avatar_image=None, water_mark_image=None, keywords=None, description=None, last_seo=None, seo_state=None, current_state=None, active=True, last_create_pll_time=None, id=None, server_id=None, account_id=None, created_at=None, updated_at=None):
        """
        ChannelPll - a model defined in Swagger
        """

        self._task_sub_channels = None
        self._email = None
        self._password = None
        self._channel_id = None
        self._name_of_channel = None
        self._cookie = None
        self._meta_data = None
        self._status = None
        self._run = None
        self._cookie_state = None
        self._kids_content = None
        self._banner_image = None
        self._avatar_image = None
        self._water_mark_image = None
        self._keywords = None
        self._description = None
        self._last_seo = None
        self._seo_state = None
        self._current_state = None
        self._active = None
        self._last_create_pll_time = None
        self._id = None
        self._server_id = None
        self._account_id = None
        self._created_at = None
        self._updated_at = None

        if task_sub_channels is not None:
          self.task_sub_channels = task_sub_channels
        if email is not None:
          self.email = email
        if password is not None:
          self.password = password
        if channel_id is not None:
          self.channel_id = channel_id
        if name_of_channel is not None:
          self.name_of_channel = name_of_channel
        if cookie is not None:
          self.cookie = cookie
        if meta_data is not None:
          self.meta_data = meta_data
        if status is not None:
          self.status = status
        if run is not None:
          self.run = run
        if cookie_state is not None:
          self.cookie_state = cookie_state
        if kids_content is not None:
          self.kids_content = kids_content
        if banner_image is not None:
          self.banner_image = banner_image
        if avatar_image is not None:
          self.avatar_image = avatar_image
        if water_mark_image is not None:
          self.water_mark_image = water_mark_image
        if keywords is not None:
          self.keywords = keywords
        if description is not None:
          self.description = description
        if last_seo is not None:
          self.last_seo = last_seo
        if seo_state is not None:
          self.seo_state = seo_state
        if current_state is not None:
          self.current_state = current_state
        if active is not None:
          self.active = active
        if last_create_pll_time is not None:
          self.last_create_pll_time = last_create_pll_time
        if id is not None:
          self.id = id
        if server_id is not None:
          self.server_id = server_id
        if account_id is not None:
          self.account_id = account_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def task_sub_channels(self):
        """
        Gets the task_sub_channels of this ChannelPll.

        :return: The task_sub_channels of this ChannelPll.
        :rtype: list[TaskSubChannel]
        """
        return self._task_sub_channels

    @task_sub_channels.setter
    def task_sub_channels(self, task_sub_channels):
        """
        Sets the task_sub_channels of this ChannelPll.

        :param task_sub_channels: The task_sub_channels of this ChannelPll.
        :type: list[TaskSubChannel]
        """

        self._task_sub_channels = task_sub_channels

    @property
    def email(self):
        """
        Gets the email of this ChannelPll.

        :return: The email of this ChannelPll.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ChannelPll.

        :param email: The email of this ChannelPll.
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """
        Gets the password of this ChannelPll.

        :return: The password of this ChannelPll.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ChannelPll.

        :param password: The password of this ChannelPll.
        :type: str
        """

        self._password = password

    @property
    def channel_id(self):
        """
        Gets the channel_id of this ChannelPll.

        :return: The channel_id of this ChannelPll.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this ChannelPll.

        :param channel_id: The channel_id of this ChannelPll.
        :type: str
        """

        self._channel_id = channel_id

    @property
    def name_of_channel(self):
        """
        Gets the name_of_channel of this ChannelPll.

        :return: The name_of_channel of this ChannelPll.
        :rtype: str
        """
        return self._name_of_channel

    @name_of_channel.setter
    def name_of_channel(self, name_of_channel):
        """
        Sets the name_of_channel of this ChannelPll.

        :param name_of_channel: The name_of_channel of this ChannelPll.
        :type: str
        """

        self._name_of_channel = name_of_channel

    @property
    def cookie(self):
        """
        Gets the cookie of this ChannelPll.

        :return: The cookie of this ChannelPll.
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """
        Sets the cookie of this ChannelPll.

        :param cookie: The cookie of this ChannelPll.
        :type: str
        """

        self._cookie = cookie

    @property
    def meta_data(self):
        """
        Gets the meta_data of this ChannelPll.

        :return: The meta_data of this ChannelPll.
        :rtype: str
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """
        Sets the meta_data of this ChannelPll.

        :param meta_data: The meta_data of this ChannelPll.
        :type: str
        """

        self._meta_data = meta_data

    @property
    def status(self):
        """
        Gets the status of this ChannelPll.

        :return: The status of this ChannelPll.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ChannelPll.

        :param status: The status of this ChannelPll.
        :type: str
        """

        self._status = status

    @property
    def run(self):
        """
        Gets the run of this ChannelPll.

        :return: The run of this ChannelPll.
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """
        Sets the run of this ChannelPll.

        :param run: The run of this ChannelPll.
        :type: str
        """

        self._run = run

    @property
    def cookie_state(self):
        """
        Gets the cookie_state of this ChannelPll.

        :return: The cookie_state of this ChannelPll.
        :rtype: str
        """
        return self._cookie_state

    @cookie_state.setter
    def cookie_state(self, cookie_state):
        """
        Sets the cookie_state of this ChannelPll.

        :param cookie_state: The cookie_state of this ChannelPll.
        :type: str
        """

        self._cookie_state = cookie_state

    @property
    def kids_content(self):
        """
        Gets the kids_content of this ChannelPll.

        :return: The kids_content of this ChannelPll.
        :rtype: bool
        """
        return self._kids_content

    @kids_content.setter
    def kids_content(self, kids_content):
        """
        Sets the kids_content of this ChannelPll.

        :param kids_content: The kids_content of this ChannelPll.
        :type: bool
        """

        self._kids_content = kids_content

    @property
    def banner_image(self):
        """
        Gets the banner_image of this ChannelPll.

        :return: The banner_image of this ChannelPll.
        :rtype: str
        """
        return self._banner_image

    @banner_image.setter
    def banner_image(self, banner_image):
        """
        Sets the banner_image of this ChannelPll.

        :param banner_image: The banner_image of this ChannelPll.
        :type: str
        """

        self._banner_image = banner_image

    @property
    def avatar_image(self):
        """
        Gets the avatar_image of this ChannelPll.

        :return: The avatar_image of this ChannelPll.
        :rtype: str
        """
        return self._avatar_image

    @avatar_image.setter
    def avatar_image(self, avatar_image):
        """
        Sets the avatar_image of this ChannelPll.

        :param avatar_image: The avatar_image of this ChannelPll.
        :type: str
        """

        self._avatar_image = avatar_image

    @property
    def water_mark_image(self):
        """
        Gets the water_mark_image of this ChannelPll.

        :return: The water_mark_image of this ChannelPll.
        :rtype: str
        """
        return self._water_mark_image

    @water_mark_image.setter
    def water_mark_image(self, water_mark_image):
        """
        Sets the water_mark_image of this ChannelPll.

        :param water_mark_image: The water_mark_image of this ChannelPll.
        :type: str
        """

        self._water_mark_image = water_mark_image

    @property
    def keywords(self):
        """
        Gets the keywords of this ChannelPll.

        :return: The keywords of this ChannelPll.
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this ChannelPll.

        :param keywords: The keywords of this ChannelPll.
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def description(self):
        """
        Gets the description of this ChannelPll.

        :return: The description of this ChannelPll.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ChannelPll.

        :param description: The description of this ChannelPll.
        :type: str
        """

        self._description = description

    @property
    def last_seo(self):
        """
        Gets the last_seo of this ChannelPll.

        :return: The last_seo of this ChannelPll.
        :rtype: datetime
        """
        return self._last_seo

    @last_seo.setter
    def last_seo(self, last_seo):
        """
        Sets the last_seo of this ChannelPll.

        :param last_seo: The last_seo of this ChannelPll.
        :type: datetime
        """

        self._last_seo = last_seo

    @property
    def seo_state(self):
        """
        Gets the seo_state of this ChannelPll.

        :return: The seo_state of this ChannelPll.
        :rtype: str
        """
        return self._seo_state

    @seo_state.setter
    def seo_state(self, seo_state):
        """
        Sets the seo_state of this ChannelPll.

        :param seo_state: The seo_state of this ChannelPll.
        :type: str
        """

        self._seo_state = seo_state

    @property
    def current_state(self):
        """
        Gets the current_state of this ChannelPll.

        :return: The current_state of this ChannelPll.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """
        Sets the current_state of this ChannelPll.

        :param current_state: The current_state of this ChannelPll.
        :type: str
        """

        self._current_state = current_state

    @property
    def active(self):
        """
        Gets the active of this ChannelPll.

        :return: The active of this ChannelPll.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ChannelPll.

        :param active: The active of this ChannelPll.
        :type: bool
        """

        self._active = active

    @property
    def last_create_pll_time(self):
        """
        Gets the last_create_pll_time of this ChannelPll.

        :return: The last_create_pll_time of this ChannelPll.
        :rtype: str
        """
        return self._last_create_pll_time

    @last_create_pll_time.setter
    def last_create_pll_time(self, last_create_pll_time):
        """
        Sets the last_create_pll_time of this ChannelPll.

        :param last_create_pll_time: The last_create_pll_time of this ChannelPll.
        :type: str
        """

        self._last_create_pll_time = last_create_pll_time

    @property
    def id(self):
        """
        Gets the id of this ChannelPll.

        :return: The id of this ChannelPll.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ChannelPll.

        :param id: The id of this ChannelPll.
        :type: float
        """

        self._id = id

    @property
    def server_id(self):
        """
        Gets the server_id of this ChannelPll.

        :return: The server_id of this ChannelPll.
        :rtype: float
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """
        Sets the server_id of this ChannelPll.

        :param server_id: The server_id of this ChannelPll.
        :type: float
        """

        self._server_id = server_id

    @property
    def account_id(self):
        """
        Gets the account_id of this ChannelPll.

        :return: The account_id of this ChannelPll.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this ChannelPll.

        :param account_id: The account_id of this ChannelPll.
        :type: float
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """
        Gets the created_at of this ChannelPll.

        :return: The created_at of this ChannelPll.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ChannelPll.

        :param created_at: The created_at of this ChannelPll.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ChannelPll.

        :return: The updated_at of this ChannelPll.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ChannelPll.

        :param updated_at: The updated_at of this ChannelPll.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChannelPll):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
