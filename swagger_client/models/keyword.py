# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Keyword(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status': 'str',
        'id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'category_id': 'float',
        'country_id': 'float',
        'language_id': 'float'
    }

    attribute_map = {
        'name': 'name',
        'status': 'status',
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'category_id': 'categoryId',
        'country_id': 'countryId',
        'language_id': 'languageId'
    }

    def __init__(self, name=None, status=None, id=None, created_at=None, updated_at=None, category_id=None, country_id=None, language_id=None):
        """
        Keyword - a model defined in Swagger
        """

        self._name = None
        self._status = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._category_id = None
        self._country_id = None
        self._language_id = None

        if name is not None:
          self.name = name
        if status is not None:
          self.status = status
        if id is not None:
          self.id = id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if category_id is not None:
          self.category_id = category_id
        if country_id is not None:
          self.country_id = country_id
        if language_id is not None:
          self.language_id = language_id

    @property
    def name(self):
        """
        Gets the name of this Keyword.

        :return: The name of this Keyword.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Keyword.

        :param name: The name of this Keyword.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this Keyword.

        :return: The status of this Keyword.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Keyword.

        :param status: The status of this Keyword.
        :type: str
        """

        self._status = status

    @property
    def id(self):
        """
        Gets the id of this Keyword.

        :return: The id of this Keyword.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Keyword.

        :param id: The id of this Keyword.
        :type: float
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this Keyword.

        :return: The created_at of this Keyword.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Keyword.

        :param created_at: The created_at of this Keyword.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Keyword.

        :return: The updated_at of this Keyword.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Keyword.

        :param updated_at: The updated_at of this Keyword.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def category_id(self):
        """
        Gets the category_id of this Keyword.

        :return: The category_id of this Keyword.
        :rtype: float
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this Keyword.

        :param category_id: The category_id of this Keyword.
        :type: float
        """

        self._category_id = category_id

    @property
    def country_id(self):
        """
        Gets the country_id of this Keyword.

        :return: The country_id of this Keyword.
        :rtype: float
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """
        Sets the country_id of this Keyword.

        :param country_id: The country_id of this Keyword.
        :type: float
        """

        self._country_id = country_id

    @property
    def language_id(self):
        """
        Gets the language_id of this Keyword.

        :return: The language_id of this Keyword.
        :rtype: float
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """
        Sets the language_id of this Keyword.

        :param language_id: The language_id of this Keyword.
        :type: float
        """

        self._language_id = language_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Keyword):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
