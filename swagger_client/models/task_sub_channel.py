# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaskSubChannel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscribed_channel': 'str',
        'times': 'float',
        'video_ids': 'list[str]',
        'status': 'bool',
        'id': 'float',
        'channel_pll_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'channel_need_sub_id': 'float'
    }

    attribute_map = {
        'subscribed_channel': 'subscribedChannel',
        'times': 'times',
        'video_ids': 'videoIds',
        'status': 'status',
        'id': 'id',
        'channel_pll_id': 'channelPllId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'channel_need_sub_id': 'channelNeedSubId'
    }

    def __init__(self, subscribed_channel=None, times=None, video_ids=None, status=None, id=None, channel_pll_id=None, created_at=None, updated_at=None, channel_need_sub_id=None):
        """
        TaskSubChannel - a model defined in Swagger
        """

        self._subscribed_channel = None
        self._times = None
        self._video_ids = None
        self._status = None
        self._id = None
        self._channel_pll_id = None
        self._created_at = None
        self._updated_at = None
        self._channel_need_sub_id = None

        if subscribed_channel is not None:
          self.subscribed_channel = subscribed_channel
        if times is not None:
          self.times = times
        if video_ids is not None:
          self.video_ids = video_ids
        if status is not None:
          self.status = status
        if id is not None:
          self.id = id
        if channel_pll_id is not None:
          self.channel_pll_id = channel_pll_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if channel_need_sub_id is not None:
          self.channel_need_sub_id = channel_need_sub_id

    @property
    def subscribed_channel(self):
        """
        Gets the subscribed_channel of this TaskSubChannel.

        :return: The subscribed_channel of this TaskSubChannel.
        :rtype: str
        """
        return self._subscribed_channel

    @subscribed_channel.setter
    def subscribed_channel(self, subscribed_channel):
        """
        Sets the subscribed_channel of this TaskSubChannel.

        :param subscribed_channel: The subscribed_channel of this TaskSubChannel.
        :type: str
        """

        self._subscribed_channel = subscribed_channel

    @property
    def times(self):
        """
        Gets the times of this TaskSubChannel.

        :return: The times of this TaskSubChannel.
        :rtype: float
        """
        return self._times

    @times.setter
    def times(self, times):
        """
        Sets the times of this TaskSubChannel.

        :param times: The times of this TaskSubChannel.
        :type: float
        """

        self._times = times

    @property
    def video_ids(self):
        """
        Gets the video_ids of this TaskSubChannel.

        :return: The video_ids of this TaskSubChannel.
        :rtype: list[str]
        """
        return self._video_ids

    @video_ids.setter
    def video_ids(self, video_ids):
        """
        Sets the video_ids of this TaskSubChannel.

        :param video_ids: The video_ids of this TaskSubChannel.
        :type: list[str]
        """

        self._video_ids = video_ids

    @property
    def status(self):
        """
        Gets the status of this TaskSubChannel.

        :return: The status of this TaskSubChannel.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TaskSubChannel.

        :param status: The status of this TaskSubChannel.
        :type: bool
        """

        self._status = status

    @property
    def id(self):
        """
        Gets the id of this TaskSubChannel.

        :return: The id of this TaskSubChannel.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TaskSubChannel.

        :param id: The id of this TaskSubChannel.
        :type: float
        """

        self._id = id

    @property
    def channel_pll_id(self):
        """
        Gets the channel_pll_id of this TaskSubChannel.

        :return: The channel_pll_id of this TaskSubChannel.
        :rtype: float
        """
        return self._channel_pll_id

    @channel_pll_id.setter
    def channel_pll_id(self, channel_pll_id):
        """
        Sets the channel_pll_id of this TaskSubChannel.

        :param channel_pll_id: The channel_pll_id of this TaskSubChannel.
        :type: float
        """

        self._channel_pll_id = channel_pll_id

    @property
    def created_at(self):
        """
        Gets the created_at of this TaskSubChannel.

        :return: The created_at of this TaskSubChannel.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this TaskSubChannel.

        :param created_at: The created_at of this TaskSubChannel.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this TaskSubChannel.

        :return: The updated_at of this TaskSubChannel.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this TaskSubChannel.

        :param updated_at: The updated_at of this TaskSubChannel.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def channel_need_sub_id(self):
        """
        Gets the channel_need_sub_id of this TaskSubChannel.

        :return: The channel_need_sub_id of this TaskSubChannel.
        :rtype: float
        """
        return self._channel_need_sub_id

    @channel_need_sub_id.setter
    def channel_need_sub_id(self, channel_need_sub_id):
        """
        Sets the channel_need_sub_id of this TaskSubChannel.

        :param channel_need_sub_id: The channel_need_sub_id of this TaskSubChannel.
        :type: float
        """

        self._channel_need_sub_id = channel_need_sub_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaskSubChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
