# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VideoLiveStream(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'schedule': 'str',
        'privacy': 'str',
        'thumbnail': 'str',
        'kid_content': 'str',
        'metadata': 'object',
        'id': 'float',
        'channel_id': 'float',
        'template_video_id': 'float',
        'video_render_id': 'float',
        'category_id': 'float'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'schedule': 'schedule',
        'privacy': 'privacy',
        'thumbnail': 'thumbnail',
        'kid_content': 'kidContent',
        'metadata': 'metadata',
        'id': 'id',
        'channel_id': 'channelId',
        'template_video_id': 'templateVideoId',
        'video_render_id': 'videoRenderId',
        'category_id': 'categoryId'
    }

    def __init__(self, title=None, description=None, schedule=None, privacy=None, thumbnail=None, kid_content=None, metadata=None, id=None, channel_id=None, template_video_id=None, video_render_id=None, category_id=None):
        """
        VideoLiveStream - a model defined in Swagger
        """

        self._title = None
        self._description = None
        self._schedule = None
        self._privacy = None
        self._thumbnail = None
        self._kid_content = None
        self._metadata = None
        self._id = None
        self._channel_id = None
        self._template_video_id = None
        self._video_render_id = None
        self._category_id = None

        if title is not None:
          self.title = title
        if description is not None:
          self.description = description
        if schedule is not None:
          self.schedule = schedule
        if privacy is not None:
          self.privacy = privacy
        if thumbnail is not None:
          self.thumbnail = thumbnail
        if kid_content is not None:
          self.kid_content = kid_content
        if metadata is not None:
          self.metadata = metadata
        if id is not None:
          self.id = id
        if channel_id is not None:
          self.channel_id = channel_id
        if template_video_id is not None:
          self.template_video_id = template_video_id
        if video_render_id is not None:
          self.video_render_id = video_render_id
        if category_id is not None:
          self.category_id = category_id

    @property
    def title(self):
        """
        Gets the title of this VideoLiveStream.

        :return: The title of this VideoLiveStream.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this VideoLiveStream.

        :param title: The title of this VideoLiveStream.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this VideoLiveStream.

        :return: The description of this VideoLiveStream.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this VideoLiveStream.

        :param description: The description of this VideoLiveStream.
        :type: str
        """

        self._description = description

    @property
    def schedule(self):
        """
        Gets the schedule of this VideoLiveStream.

        :return: The schedule of this VideoLiveStream.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this VideoLiveStream.

        :param schedule: The schedule of this VideoLiveStream.
        :type: str
        """

        self._schedule = schedule

    @property
    def privacy(self):
        """
        Gets the privacy of this VideoLiveStream.

        :return: The privacy of this VideoLiveStream.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """
        Sets the privacy of this VideoLiveStream.

        :param privacy: The privacy of this VideoLiveStream.
        :type: str
        """

        self._privacy = privacy

    @property
    def thumbnail(self):
        """
        Gets the thumbnail of this VideoLiveStream.

        :return: The thumbnail of this VideoLiveStream.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """
        Sets the thumbnail of this VideoLiveStream.

        :param thumbnail: The thumbnail of this VideoLiveStream.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def kid_content(self):
        """
        Gets the kid_content of this VideoLiveStream.

        :return: The kid_content of this VideoLiveStream.
        :rtype: str
        """
        return self._kid_content

    @kid_content.setter
    def kid_content(self, kid_content):
        """
        Sets the kid_content of this VideoLiveStream.

        :param kid_content: The kid_content of this VideoLiveStream.
        :type: str
        """

        self._kid_content = kid_content

    @property
    def metadata(self):
        """
        Gets the metadata of this VideoLiveStream.

        :return: The metadata of this VideoLiveStream.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this VideoLiveStream.

        :param metadata: The metadata of this VideoLiveStream.
        :type: object
        """

        self._metadata = metadata

    @property
    def id(self):
        """
        Gets the id of this VideoLiveStream.

        :return: The id of this VideoLiveStream.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VideoLiveStream.

        :param id: The id of this VideoLiveStream.
        :type: float
        """

        self._id = id

    @property
    def channel_id(self):
        """
        Gets the channel_id of this VideoLiveStream.

        :return: The channel_id of this VideoLiveStream.
        :rtype: float
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this VideoLiveStream.

        :param channel_id: The channel_id of this VideoLiveStream.
        :type: float
        """

        self._channel_id = channel_id

    @property
    def template_video_id(self):
        """
        Gets the template_video_id of this VideoLiveStream.

        :return: The template_video_id of this VideoLiveStream.
        :rtype: float
        """
        return self._template_video_id

    @template_video_id.setter
    def template_video_id(self, template_video_id):
        """
        Sets the template_video_id of this VideoLiveStream.

        :param template_video_id: The template_video_id of this VideoLiveStream.
        :type: float
        """

        self._template_video_id = template_video_id

    @property
    def video_render_id(self):
        """
        Gets the video_render_id of this VideoLiveStream.

        :return: The video_render_id of this VideoLiveStream.
        :rtype: float
        """
        return self._video_render_id

    @video_render_id.setter
    def video_render_id(self, video_render_id):
        """
        Sets the video_render_id of this VideoLiveStream.

        :param video_render_id: The video_render_id of this VideoLiveStream.
        :type: float
        """

        self._video_render_id = video_render_id

    @property
    def category_id(self):
        """
        Gets the category_id of this VideoLiveStream.

        :return: The category_id of this VideoLiveStream.
        :rtype: float
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this VideoLiveStream.

        :param category_id: The category_id of this VideoLiveStream.
        :type: float
        """

        self._category_id = category_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VideoLiveStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
