# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Recognition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video_id': 'str',
        'status': 'str',
        'claims': 'list[object]',
        'id': 'float'
    }

    attribute_map = {
        'video_id': 'videoId',
        'status': 'status',
        'claims': 'claims',
        'id': 'id'
    }

    def __init__(self, video_id=None, status=None, claims=None, id=None):
        """
        Recognition - a model defined in Swagger
        """

        self._video_id = None
        self._status = None
        self._claims = None
        self._id = None

        if video_id is not None:
          self.video_id = video_id
        if status is not None:
          self.status = status
        if claims is not None:
          self.claims = claims
        if id is not None:
          self.id = id

    @property
    def video_id(self):
        """
        Gets the video_id of this Recognition.

        :return: The video_id of this Recognition.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """
        Sets the video_id of this Recognition.

        :param video_id: The video_id of this Recognition.
        :type: str
        """

        self._video_id = video_id

    @property
    def status(self):
        """
        Gets the status of this Recognition.

        :return: The status of this Recognition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Recognition.

        :param status: The status of this Recognition.
        :type: str
        """

        self._status = status

    @property
    def claims(self):
        """
        Gets the claims of this Recognition.

        :return: The claims of this Recognition.
        :rtype: list[object]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """
        Sets the claims of this Recognition.

        :param claims: The claims of this Recognition.
        :type: list[object]
        """

        self._claims = claims

    @property
    def id(self):
        """
        Gets the id of this Recognition.

        :return: The id of this Recognition.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Recognition.

        :param id: The id of this Recognition.
        :type: float
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Recognition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
