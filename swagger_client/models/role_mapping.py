# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RoleMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'principal_type': 'str',
        'principal_id': 'str',
        'role_id': 'float'
    }

    attribute_map = {
        'id': 'id',
        'principal_type': 'principalType',
        'principal_id': 'principalId',
        'role_id': 'roleId'
    }

    def __init__(self, id=None, principal_type=None, principal_id=None, role_id=None):
        """
        RoleMapping - a model defined in Swagger
        """

        self._id = None
        self._principal_type = None
        self._principal_id = None
        self._role_id = None

        if id is not None:
          self.id = id
        if principal_type is not None:
          self.principal_type = principal_type
        if principal_id is not None:
          self.principal_id = principal_id
        if role_id is not None:
          self.role_id = role_id

    @property
    def id(self):
        """
        Gets the id of this RoleMapping.

        :return: The id of this RoleMapping.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RoleMapping.

        :param id: The id of this RoleMapping.
        :type: float
        """

        self._id = id

    @property
    def principal_type(self):
        """
        Gets the principal_type of this RoleMapping.
        The principal type, such as USER, APPLICATION, ROLE, or user model name in case of multiple user models

        :return: The principal_type of this RoleMapping.
        :rtype: str
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """
        Sets the principal_type of this RoleMapping.
        The principal type, such as USER, APPLICATION, ROLE, or user model name in case of multiple user models

        :param principal_type: The principal_type of this RoleMapping.
        :type: str
        """

        self._principal_type = principal_type

    @property
    def principal_id(self):
        """
        Gets the principal_id of this RoleMapping.

        :return: The principal_id of this RoleMapping.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """
        Sets the principal_id of this RoleMapping.

        :param principal_id: The principal_id of this RoleMapping.
        :type: str
        """

        self._principal_id = principal_id

    @property
    def role_id(self):
        """
        Gets the role_id of this RoleMapping.

        :return: The role_id of this RoleMapping.
        :rtype: float
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """
        Sets the role_id of this RoleMapping.

        :param role_id: The role_id of this RoleMapping.
        :type: float
        """

        self._role_id = role_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RoleMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
