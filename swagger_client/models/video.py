# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Video(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video_id': 'str',
        'title': 'str',
        'description': 'str',
        'tag': 'str',
        'thumbnail': 'str',
        'status': 'str',
        'view_count': 'str',
        'duration': 'float',
        'copy_right': 'bool',
        'action': 'str',
        'state': 'str',
        'from_source': 'str',
        'publish_time': 'datetime',
        'before_seo': 'datetime',
        'after_seo': 'datetime',
        'qc_comment': 'str',
        'list': 'str',
        'list_song_in_des': 'str',
        'title_with_singer': 'str',
        'claim_check': 'str',
        'claim_detail': 'str',
        'status_card_info': 'bool',
        'data_card_info': 'list[object]',
        'status_end_screen': 'bool',
        'data_end_screen': 'list[object]',
        'status_add_to_pll': 'str',
        'number_of_plls': 'float',
        'id': 'float',
        'account_id': 'float',
        'channel_id': 'float',
        'category_id': 'float',
        'song_font_id': 'float',
        'title_font_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'sub_category_id': 'float'
    }

    attribute_map = {
        'video_id': 'videoId',
        'title': 'title',
        'description': 'description',
        'tag': 'tag',
        'thumbnail': 'thumbnail',
        'status': 'status',
        'view_count': 'viewCount',
        'duration': 'duration',
        'copy_right': 'copyRight',
        'action': 'action',
        'state': 'state',
        'from_source': 'fromSource',
        'publish_time': 'publishTime',
        'before_seo': 'beforeSeo',
        'after_seo': 'afterSeo',
        'qc_comment': 'qcComment',
        'list': 'list',
        'list_song_in_des': 'listSongInDes',
        'title_with_singer': 'titleWithSinger',
        'claim_check': 'claimCheck',
        'claim_detail': 'claimDetail',
        'status_card_info': 'statusCardInfo',
        'data_card_info': 'dataCardInfo',
        'status_end_screen': 'statusEndScreen',
        'data_end_screen': 'dataEndScreen',
        'status_add_to_pll': 'statusAddToPll',
        'number_of_plls': 'numberOfPlls',
        'id': 'id',
        'account_id': 'accountId',
        'channel_id': 'channelId',
        'category_id': 'categoryId',
        'song_font_id': 'songFontId',
        'title_font_id': 'titleFontId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'sub_category_id': 'subCategoryId'
    }

    def __init__(self, video_id=None, title=None, description=None, tag=None, thumbnail=None, status=None, view_count=None, duration=None, copy_right=None, action='WAIT', state=None, from_source=None, publish_time=None, before_seo=None, after_seo=None, qc_comment=None, list=None, list_song_in_des='yes', title_with_singer=None, claim_check='WAIT', claim_detail=None, status_card_info=None, data_card_info=None, status_end_screen=None, data_end_screen=None, status_add_to_pll=None, number_of_plls=None, id=None, account_id=None, channel_id=None, category_id=None, song_font_id=None, title_font_id=None, created_at=None, updated_at=None, sub_category_id=None):
        """
        Video - a model defined in Swagger
        """

        self._video_id = None
        self._title = None
        self._description = None
        self._tag = None
        self._thumbnail = None
        self._status = None
        self._view_count = None
        self._duration = None
        self._copy_right = None
        self._action = None
        self._state = None
        self._from_source = None
        self._publish_time = None
        self._before_seo = None
        self._after_seo = None
        self._qc_comment = None
        self._list = None
        self._list_song_in_des = None
        self._title_with_singer = None
        self._claim_check = None
        self._claim_detail = None
        self._status_card_info = None
        self._data_card_info = None
        self._status_end_screen = None
        self._data_end_screen = None
        self._status_add_to_pll = None
        self._number_of_plls = None
        self._id = None
        self._account_id = None
        self._channel_id = None
        self._category_id = None
        self._song_font_id = None
        self._title_font_id = None
        self._created_at = None
        self._updated_at = None
        self._sub_category_id = None

        if video_id is not None:
          self.video_id = video_id
        if title is not None:
          self.title = title
        if description is not None:
          self.description = description
        if tag is not None:
          self.tag = tag
        if thumbnail is not None:
          self.thumbnail = thumbnail
        if status is not None:
          self.status = status
        if view_count is not None:
          self.view_count = view_count
        if duration is not None:
          self.duration = duration
        if copy_right is not None:
          self.copy_right = copy_right
        if action is not None:
          self.action = action
        if state is not None:
          self.state = state
        if from_source is not None:
          self.from_source = from_source
        if publish_time is not None:
          self.publish_time = publish_time
        if before_seo is not None:
          self.before_seo = before_seo
        if after_seo is not None:
          self.after_seo = after_seo
        if qc_comment is not None:
          self.qc_comment = qc_comment
        if list is not None:
          self.list = list
        if list_song_in_des is not None:
          self.list_song_in_des = list_song_in_des
        if title_with_singer is not None:
          self.title_with_singer = title_with_singer
        if claim_check is not None:
          self.claim_check = claim_check
        if claim_detail is not None:
          self.claim_detail = claim_detail
        if status_card_info is not None:
          self.status_card_info = status_card_info
        if data_card_info is not None:
          self.data_card_info = data_card_info
        if status_end_screen is not None:
          self.status_end_screen = status_end_screen
        if data_end_screen is not None:
          self.data_end_screen = data_end_screen
        if status_add_to_pll is not None:
          self.status_add_to_pll = status_add_to_pll
        if number_of_plls is not None:
          self.number_of_plls = number_of_plls
        if id is not None:
          self.id = id
        if account_id is not None:
          self.account_id = account_id
        if channel_id is not None:
          self.channel_id = channel_id
        if category_id is not None:
          self.category_id = category_id
        if song_font_id is not None:
          self.song_font_id = song_font_id
        if title_font_id is not None:
          self.title_font_id = title_font_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if sub_category_id is not None:
          self.sub_category_id = sub_category_id

    @property
    def video_id(self):
        """
        Gets the video_id of this Video.

        :return: The video_id of this Video.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """
        Sets the video_id of this Video.

        :param video_id: The video_id of this Video.
        :type: str
        """

        self._video_id = video_id

    @property
    def title(self):
        """
        Gets the title of this Video.

        :return: The title of this Video.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Video.

        :param title: The title of this Video.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this Video.

        :return: The description of this Video.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Video.

        :param description: The description of this Video.
        :type: str
        """

        self._description = description

    @property
    def tag(self):
        """
        Gets the tag of this Video.

        :return: The tag of this Video.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Video.

        :param tag: The tag of this Video.
        :type: str
        """

        self._tag = tag

    @property
    def thumbnail(self):
        """
        Gets the thumbnail of this Video.

        :return: The thumbnail of this Video.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """
        Sets the thumbnail of this Video.

        :param thumbnail: The thumbnail of this Video.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def status(self):
        """
        Gets the status of this Video.

        :return: The status of this Video.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Video.

        :param status: The status of this Video.
        :type: str
        """

        self._status = status

    @property
    def view_count(self):
        """
        Gets the view_count of this Video.

        :return: The view_count of this Video.
        :rtype: str
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this Video.

        :param view_count: The view_count of this Video.
        :type: str
        """

        self._view_count = view_count

    @property
    def duration(self):
        """
        Gets the duration of this Video.

        :return: The duration of this Video.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Video.

        :param duration: The duration of this Video.
        :type: float
        """

        self._duration = duration

    @property
    def copy_right(self):
        """
        Gets the copy_right of this Video.

        :return: The copy_right of this Video.
        :rtype: bool
        """
        return self._copy_right

    @copy_right.setter
    def copy_right(self, copy_right):
        """
        Sets the copy_right of this Video.

        :param copy_right: The copy_right of this Video.
        :type: bool
        """

        self._copy_right = copy_right

    @property
    def action(self):
        """
        Gets the action of this Video.

        :return: The action of this Video.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this Video.

        :param action: The action of this Video.
        :type: str
        """

        self._action = action

    @property
    def state(self):
        """
        Gets the state of this Video.

        :return: The state of this Video.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Video.

        :param state: The state of this Video.
        :type: str
        """

        self._state = state

    @property
    def from_source(self):
        """
        Gets the from_source of this Video.

        :return: The from_source of this Video.
        :rtype: str
        """
        return self._from_source

    @from_source.setter
    def from_source(self, from_source):
        """
        Sets the from_source of this Video.

        :param from_source: The from_source of this Video.
        :type: str
        """

        self._from_source = from_source

    @property
    def publish_time(self):
        """
        Gets the publish_time of this Video.

        :return: The publish_time of this Video.
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """
        Sets the publish_time of this Video.

        :param publish_time: The publish_time of this Video.
        :type: datetime
        """

        self._publish_time = publish_time

    @property
    def before_seo(self):
        """
        Gets the before_seo of this Video.

        :return: The before_seo of this Video.
        :rtype: datetime
        """
        return self._before_seo

    @before_seo.setter
    def before_seo(self, before_seo):
        """
        Sets the before_seo of this Video.

        :param before_seo: The before_seo of this Video.
        :type: datetime
        """

        self._before_seo = before_seo

    @property
    def after_seo(self):
        """
        Gets the after_seo of this Video.

        :return: The after_seo of this Video.
        :rtype: datetime
        """
        return self._after_seo

    @after_seo.setter
    def after_seo(self, after_seo):
        """
        Sets the after_seo of this Video.

        :param after_seo: The after_seo of this Video.
        :type: datetime
        """

        self._after_seo = after_seo

    @property
    def qc_comment(self):
        """
        Gets the qc_comment of this Video.

        :return: The qc_comment of this Video.
        :rtype: str
        """
        return self._qc_comment

    @qc_comment.setter
    def qc_comment(self, qc_comment):
        """
        Sets the qc_comment of this Video.

        :param qc_comment: The qc_comment of this Video.
        :type: str
        """

        self._qc_comment = qc_comment

    @property
    def list(self):
        """
        Gets the list of this Video.

        :return: The list of this Video.
        :rtype: str
        """
        return self._list

    @list.setter
    def list(self, list):
        """
        Sets the list of this Video.

        :param list: The list of this Video.
        :type: str
        """

        self._list = list

    @property
    def list_song_in_des(self):
        """
        Gets the list_song_in_des of this Video.

        :return: The list_song_in_des of this Video.
        :rtype: str
        """
        return self._list_song_in_des

    @list_song_in_des.setter
    def list_song_in_des(self, list_song_in_des):
        """
        Sets the list_song_in_des of this Video.

        :param list_song_in_des: The list_song_in_des of this Video.
        :type: str
        """

        self._list_song_in_des = list_song_in_des

    @property
    def title_with_singer(self):
        """
        Gets the title_with_singer of this Video.

        :return: The title_with_singer of this Video.
        :rtype: str
        """
        return self._title_with_singer

    @title_with_singer.setter
    def title_with_singer(self, title_with_singer):
        """
        Sets the title_with_singer of this Video.

        :param title_with_singer: The title_with_singer of this Video.
        :type: str
        """

        self._title_with_singer = title_with_singer

    @property
    def claim_check(self):
        """
        Gets the claim_check of this Video.

        :return: The claim_check of this Video.
        :rtype: str
        """
        return self._claim_check

    @claim_check.setter
    def claim_check(self, claim_check):
        """
        Sets the claim_check of this Video.

        :param claim_check: The claim_check of this Video.
        :type: str
        """

        self._claim_check = claim_check

    @property
    def claim_detail(self):
        """
        Gets the claim_detail of this Video.

        :return: The claim_detail of this Video.
        :rtype: str
        """
        return self._claim_detail

    @claim_detail.setter
    def claim_detail(self, claim_detail):
        """
        Sets the claim_detail of this Video.

        :param claim_detail: The claim_detail of this Video.
        :type: str
        """

        self._claim_detail = claim_detail

    @property
    def status_card_info(self):
        """
        Gets the status_card_info of this Video.

        :return: The status_card_info of this Video.
        :rtype: bool
        """
        return self._status_card_info

    @status_card_info.setter
    def status_card_info(self, status_card_info):
        """
        Sets the status_card_info of this Video.

        :param status_card_info: The status_card_info of this Video.
        :type: bool
        """

        self._status_card_info = status_card_info

    @property
    def data_card_info(self):
        """
        Gets the data_card_info of this Video.

        :return: The data_card_info of this Video.
        :rtype: list[object]
        """
        return self._data_card_info

    @data_card_info.setter
    def data_card_info(self, data_card_info):
        """
        Sets the data_card_info of this Video.

        :param data_card_info: The data_card_info of this Video.
        :type: list[object]
        """

        self._data_card_info = data_card_info

    @property
    def status_end_screen(self):
        """
        Gets the status_end_screen of this Video.

        :return: The status_end_screen of this Video.
        :rtype: bool
        """
        return self._status_end_screen

    @status_end_screen.setter
    def status_end_screen(self, status_end_screen):
        """
        Sets the status_end_screen of this Video.

        :param status_end_screen: The status_end_screen of this Video.
        :type: bool
        """

        self._status_end_screen = status_end_screen

    @property
    def data_end_screen(self):
        """
        Gets the data_end_screen of this Video.

        :return: The data_end_screen of this Video.
        :rtype: list[object]
        """
        return self._data_end_screen

    @data_end_screen.setter
    def data_end_screen(self, data_end_screen):
        """
        Sets the data_end_screen of this Video.

        :param data_end_screen: The data_end_screen of this Video.
        :type: list[object]
        """

        self._data_end_screen = data_end_screen

    @property
    def status_add_to_pll(self):
        """
        Gets the status_add_to_pll of this Video.

        :return: The status_add_to_pll of this Video.
        :rtype: str
        """
        return self._status_add_to_pll

    @status_add_to_pll.setter
    def status_add_to_pll(self, status_add_to_pll):
        """
        Sets the status_add_to_pll of this Video.

        :param status_add_to_pll: The status_add_to_pll of this Video.
        :type: str
        """

        self._status_add_to_pll = status_add_to_pll

    @property
    def number_of_plls(self):
        """
        Gets the number_of_plls of this Video.

        :return: The number_of_plls of this Video.
        :rtype: float
        """
        return self._number_of_plls

    @number_of_plls.setter
    def number_of_plls(self, number_of_plls):
        """
        Sets the number_of_plls of this Video.

        :param number_of_plls: The number_of_plls of this Video.
        :type: float
        """

        self._number_of_plls = number_of_plls

    @property
    def id(self):
        """
        Gets the id of this Video.

        :return: The id of this Video.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Video.

        :param id: The id of this Video.
        :type: float
        """

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this Video.

        :return: The account_id of this Video.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Video.

        :param account_id: The account_id of this Video.
        :type: float
        """

        self._account_id = account_id

    @property
    def channel_id(self):
        """
        Gets the channel_id of this Video.

        :return: The channel_id of this Video.
        :rtype: float
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this Video.

        :param channel_id: The channel_id of this Video.
        :type: float
        """

        self._channel_id = channel_id

    @property
    def category_id(self):
        """
        Gets the category_id of this Video.

        :return: The category_id of this Video.
        :rtype: float
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this Video.

        :param category_id: The category_id of this Video.
        :type: float
        """

        self._category_id = category_id

    @property
    def song_font_id(self):
        """
        Gets the song_font_id of this Video.

        :return: The song_font_id of this Video.
        :rtype: float
        """
        return self._song_font_id

    @song_font_id.setter
    def song_font_id(self, song_font_id):
        """
        Sets the song_font_id of this Video.

        :param song_font_id: The song_font_id of this Video.
        :type: float
        """

        self._song_font_id = song_font_id

    @property
    def title_font_id(self):
        """
        Gets the title_font_id of this Video.

        :return: The title_font_id of this Video.
        :rtype: float
        """
        return self._title_font_id

    @title_font_id.setter
    def title_font_id(self, title_font_id):
        """
        Sets the title_font_id of this Video.

        :param title_font_id: The title_font_id of this Video.
        :type: float
        """

        self._title_font_id = title_font_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Video.

        :return: The created_at of this Video.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Video.

        :param created_at: The created_at of this Video.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Video.

        :return: The updated_at of this Video.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Video.

        :param updated_at: The updated_at of this Video.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def sub_category_id(self):
        """
        Gets the sub_category_id of this Video.

        :return: The sub_category_id of this Video.
        :rtype: float
        """
        return self._sub_category_id

    @sub_category_id.setter
    def sub_category_id(self, sub_category_id):
        """
        Sets the sub_category_id of this Video.

        :param sub_category_id: The sub_category_id of this Video.
        :type: float
        """

        self._sub_category_id = sub_category_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Video):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
