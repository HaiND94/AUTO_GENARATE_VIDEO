# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Account(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_name': 'str',
        'address': 'str',
        'department': 'str',
        'date_of_birth': 'datetime',
        'phone_number': 'str',
        'kind': 'str',
        'sex': 'bool',
        'avatar': 'str',
        'realm': 'str',
        'username': 'str',
        'email': 'str',
        'email_verified': 'bool',
        'id': 'float',
        'account_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'server_id': 'float'
    }

    attribute_map = {
        'full_name': 'fullName',
        'address': 'address',
        'department': 'department',
        'date_of_birth': 'dateOfBirth',
        'phone_number': 'phoneNumber',
        'kind': 'kind',
        'sex': 'sex',
        'avatar': 'avatar',
        'realm': 'realm',
        'username': 'username',
        'email': 'email',
        'email_verified': 'emailVerified',
        'id': 'id',
        'account_id': 'accountId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'server_id': 'serverId'
    }

    def __init__(self, full_name=None, address=None, department=None, date_of_birth=None, phone_number=None, kind=None, sex=None, avatar=None, realm=None, username=None, email=None, email_verified=None, id=None, account_id=None, created_at=None, updated_at=None, server_id=None):
        """
        Account - a model defined in Swagger
        """

        self._full_name = None
        self._address = None
        self._department = None
        self._date_of_birth = None
        self._phone_number = None
        self._kind = None
        self._sex = None
        self._avatar = None
        self._realm = None
        self._username = None
        self._email = None
        self._email_verified = None
        self._id = None
        self._account_id = None
        self._created_at = None
        self._updated_at = None
        self._server_id = None

        if full_name is not None:
          self.full_name = full_name
        if address is not None:
          self.address = address
        if department is not None:
          self.department = department
        if date_of_birth is not None:
          self.date_of_birth = date_of_birth
        if phone_number is not None:
          self.phone_number = phone_number
        if kind is not None:
          self.kind = kind
        if sex is not None:
          self.sex = sex
        if avatar is not None:
          self.avatar = avatar
        if realm is not None:
          self.realm = realm
        if username is not None:
          self.username = username
        self.email = email
        if email_verified is not None:
          self.email_verified = email_verified
        if id is not None:
          self.id = id
        if account_id is not None:
          self.account_id = account_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if server_id is not None:
          self.server_id = server_id

    @property
    def full_name(self):
        """
        Gets the full_name of this Account.

        :return: The full_name of this Account.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this Account.

        :param full_name: The full_name of this Account.
        :type: str
        """

        self._full_name = full_name

    @property
    def address(self):
        """
        Gets the address of this Account.

        :return: The address of this Account.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Account.

        :param address: The address of this Account.
        :type: str
        """

        self._address = address

    @property
    def department(self):
        """
        Gets the department of this Account.

        :return: The department of this Account.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """
        Sets the department of this Account.

        :param department: The department of this Account.
        :type: str
        """

        self._department = department

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this Account.

        :return: The date_of_birth of this Account.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this Account.

        :param date_of_birth: The date_of_birth of this Account.
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def phone_number(self):
        """
        Gets the phone_number of this Account.

        :return: The phone_number of this Account.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this Account.

        :param phone_number: The phone_number of this Account.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def kind(self):
        """
        Gets the kind of this Account.

        :return: The kind of this Account.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this Account.

        :param kind: The kind of this Account.
        :type: str
        """

        self._kind = kind

    @property
    def sex(self):
        """
        Gets the sex of this Account.

        :return: The sex of this Account.
        :rtype: bool
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """
        Sets the sex of this Account.

        :param sex: The sex of this Account.
        :type: bool
        """

        self._sex = sex

    @property
    def avatar(self):
        """
        Gets the avatar of this Account.

        :return: The avatar of this Account.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this Account.

        :param avatar: The avatar of this Account.
        :type: str
        """

        self._avatar = avatar

    @property
    def realm(self):
        """
        Gets the realm of this Account.

        :return: The realm of this Account.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """
        Sets the realm of this Account.

        :param realm: The realm of this Account.
        :type: str
        """

        self._realm = realm

    @property
    def username(self):
        """
        Gets the username of this Account.

        :return: The username of this Account.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this Account.

        :param username: The username of this Account.
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """
        Gets the email of this Account.

        :return: The email of this Account.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Account.

        :param email: The email of this Account.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def email_verified(self):
        """
        Gets the email_verified of this Account.

        :return: The email_verified of this Account.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """
        Sets the email_verified of this Account.

        :param email_verified: The email_verified of this Account.
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def id(self):
        """
        Gets the id of this Account.

        :return: The id of this Account.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Account.

        :param id: The id of this Account.
        :type: float
        """

        self._id = id

    @property
    def account_id(self):
        """
        Gets the account_id of this Account.

        :return: The account_id of this Account.
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this Account.

        :param account_id: The account_id of this Account.
        :type: float
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Account.

        :return: The created_at of this Account.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Account.

        :param created_at: The created_at of this Account.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Account.

        :return: The updated_at of this Account.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Account.

        :param updated_at: The updated_at of this Account.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def server_id(self):
        """
        Gets the server_id of this Account.

        :return: The server_id of this Account.
        :rtype: float
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """
        Sets the server_id of this Account.

        :param server_id: The server_id of this Account.
        :type: float
        """

        self._server_id = server_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
