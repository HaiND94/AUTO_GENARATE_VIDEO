# coding: utf-8

"""
    YTB-CRAWLER

    YTB-CRAWLER

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServerLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'content': 'str',
        'url': 'str',
        'value': 'str',
        'id': 'float',
        'server_id': 'float',
        'channel_id': 'float',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'channel_pll_id': 'float'
    }

    attribute_map = {
        'state': 'state',
        'content': 'content',
        'url': 'url',
        'value': 'value',
        'id': 'id',
        'server_id': 'serverId',
        'channel_id': 'channelId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'channel_pll_id': 'channelPllId'
    }

    def __init__(self, state=None, content=None, url=None, value=None, id=None, server_id=None, channel_id=None, created_at=None, updated_at=None, channel_pll_id=None):
        """
        ServerLog - a model defined in Swagger
        """

        self._state = None
        self._content = None
        self._url = None
        self._value = None
        self._id = None
        self._server_id = None
        self._channel_id = None
        self._created_at = None
        self._updated_at = None
        self._channel_pll_id = None

        if state is not None:
          self.state = state
        if content is not None:
          self.content = content
        if url is not None:
          self.url = url
        if value is not None:
          self.value = value
        if id is not None:
          self.id = id
        if server_id is not None:
          self.server_id = server_id
        if channel_id is not None:
          self.channel_id = channel_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if channel_pll_id is not None:
          self.channel_pll_id = channel_pll_id

    @property
    def state(self):
        """
        Gets the state of this ServerLog.

        :return: The state of this ServerLog.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ServerLog.

        :param state: The state of this ServerLog.
        :type: str
        """

        self._state = state

    @property
    def content(self):
        """
        Gets the content of this ServerLog.

        :return: The content of this ServerLog.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this ServerLog.

        :param content: The content of this ServerLog.
        :type: str
        """

        self._content = content

    @property
    def url(self):
        """
        Gets the url of this ServerLog.

        :return: The url of this ServerLog.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ServerLog.

        :param url: The url of this ServerLog.
        :type: str
        """

        self._url = url

    @property
    def value(self):
        """
        Gets the value of this ServerLog.

        :return: The value of this ServerLog.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ServerLog.

        :param value: The value of this ServerLog.
        :type: str
        """

        self._value = value

    @property
    def id(self):
        """
        Gets the id of this ServerLog.

        :return: The id of this ServerLog.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServerLog.

        :param id: The id of this ServerLog.
        :type: float
        """

        self._id = id

    @property
    def server_id(self):
        """
        Gets the server_id of this ServerLog.

        :return: The server_id of this ServerLog.
        :rtype: float
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """
        Sets the server_id of this ServerLog.

        :param server_id: The server_id of this ServerLog.
        :type: float
        """

        self._server_id = server_id

    @property
    def channel_id(self):
        """
        Gets the channel_id of this ServerLog.

        :return: The channel_id of this ServerLog.
        :rtype: float
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this ServerLog.

        :param channel_id: The channel_id of this ServerLog.
        :type: float
        """

        self._channel_id = channel_id

    @property
    def created_at(self):
        """
        Gets the created_at of this ServerLog.

        :return: The created_at of this ServerLog.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ServerLog.

        :param created_at: The created_at of this ServerLog.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ServerLog.

        :return: The updated_at of this ServerLog.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ServerLog.

        :param updated_at: The updated_at of this ServerLog.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def channel_pll_id(self):
        """
        Gets the channel_pll_id of this ServerLog.

        :return: The channel_pll_id of this ServerLog.
        :rtype: float
        """
        return self._channel_pll_id

    @channel_pll_id.setter
    def channel_pll_id(self, channel_pll_id):
        """
        Sets the channel_pll_id of this ServerLog.

        :param channel_pll_id: The channel_pll_id of this ServerLog.
        :type: float
        """

        self._channel_pll_id = channel_pll_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServerLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
